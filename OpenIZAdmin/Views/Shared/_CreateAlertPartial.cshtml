@model OpenIZAdmin.Models.AlertModels.CreateAlertModel
@{
    ViewBag.Title = Locale.Alerts;
}

<div id="create-alert-modal" class="modal" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">@Locale.Alerts</h4>
            </div>
            <div class="modal-body">
                @using (Html.BeginForm("CreateAlert", "Alert", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="form-group">
                        @Html.LabelFor(m => m.Subject, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.Subject, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.Subject, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.Priority, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(m => m.Priority, Model.PriorityList, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.Priority, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.Message, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.Message, new { @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.Message, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="@Locale.Submit" class="btn btn-default" />
                        </div>
                    </div>
                }
            </div>

            <div class="modal-footer">
                <div class="form-group">
                    <div class="col-md-offset-9 col-md-3">
                        <button type="button" class="btn btn-default" data-dismiss="modal">@Locale.Close</button>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

@section scripts
{
    <script type="text/javascript">
        $(document).ready(function ()
        {
            $('.dynamic-dropdown').select2({
                tags: true,
                tokenSeparators: [','],
                width: '100%'
            });

            $('.dynamic-dropdown-limited').select2({
                tags: true,
                tokenSeparators: [','],
                width: '100%',
                maximumSelectionLength: 1
            });

            $(".js-data-example-ajax").select2({
                ajax: {
                    url: "https://api.github.com/search/repositories",
                    dataType: 'json',
                    delay: 250,
                    data: function (params)
                    {
                        return {
                            q: params.term, // search term
                            page: params.page
                        };
                    },
                    processResults: function (data, params)
                    {
                        // parse the results into the format expected by Select2
                        // since we are using custom formatting functions we do not need to
                        // alter the remote JSON data, except to indicate that infinite
                        // scrolling can be used
                        params.page = params.page || 1;

                        return {
                            results: data.items,
                            pagination: {
                                more: (params.page * 30) < data.total_count
                            }
                        };
                    },
                    cache: true
                },
                escapeMarkup: function (markup) { return markup; }, // let our custom formatter work
                minimumInputLength: 1,
                templateResult: formatRepo, // omitted for brevity, see the source of this page
                templateSelection: formatRepoSelection // omitted for brevity, see the source of this page
            });
        });
    </script>

}
