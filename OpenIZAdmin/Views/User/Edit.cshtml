@using OpenIZAdmin.Models
@model OpenIZAdmin.Models.UserModels.EditUserModel
@{
    ViewBag.Title = Locale.EditUser_Heading;
}

@Html.Partial("_ObsoleteWarningPartial", new ObsoleteWarningViewModel(Model.IsObsolete, Locale.UserNotActive))

<div class="panel panel-default">
    <div class="panel-heading">
        <span class="panel-title">@Locale.EditUser_Heading</span>
        <div class="pull-right">
                            
        
                @if (!Model.IsObsolete)
                {                    
                    <a href="@Url.Action("UnlockAccount", "User", new {id = Model.Id})" class="pad-right">
                        <span class="text-warning glyphicon glyphicon-ok-sign"></span>
                        <span class="text-warning h5">@Locale.UnlockAccount</span>
                    </a>          

                    <a href="@Url.Action("ResetPassword", "User", new {id = Model.Id})">
                        <span class="text-danger glyphicon glyphicon-warning-sign"></span>
                        <span class="text-danger h5">@Locale.ResetPassword</span>
                    </a>
                }
            </div>                                
    </div>
    <div class="panel panel-body">
        @using (Html.BeginForm("Edit", "User", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
        {
            <div class="row">
                <div class="col-md-12">
                    <div class="form-horizontal">
                        @Html.AntiForgeryToken()
                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        @Html.HiddenFor(m => m.Id)
                        
                        <div class="form-group">
                            @Html.LabelFor(m => m.Username, new { @class = "col-md-2 control-label" })
                            <div class="col-md-6">
                                @Html.TextBoxFor(m => m.Username, new { @class = "form-control", @readonly = "readonly" })
                            </div>
                        </div>  
                        
                        <div class="form-group">
                            @Html.LabelFor(m => m.LockoutStatus, new { @class = "col-md-2 control-label" })
                            <div class="col-md-6">
                                @Html.TextBoxFor(m => m.LockoutStatus, new { @class = "form-control", @readonly = "readonly" })
                            </div>
                        </div> 

                        <div class="form-group">
                            @Html.LabelFor(m => m.GivenNames, new { @class = "col-md-2 control-label" })
                            <div class="col-md-8">
                                @Html.ListBoxFor(m => m.GivenNames, Model.GivenNamesList, new { @class = "dynamic-dropdown-multiple form-control", multiple = "multiple", title = Locale.ToolTip_GivenNamesListBox })
                                @Html.ValidationMessageFor(m => m.GivenNames, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.Surnames, new { @class = "col-md-2 control-label" })
                            <div class="col-md-8">
                                @Html.ListBoxFor(m => m.Surnames, Model.SurnameList, new { @class = "dynamic-dropdown-multiple form-control", multiple = "multiple", title = Locale.ToolTip_SurnamesListBox })
                                @Html.ValidationMessageFor(m => m.Surnames, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        
                        <div class="form-group">
                            @Html.LabelFor(m => m.Roles, new { @class = "col-md-2 control-label" })
                            <div class="col-md-8">
                                @Html.ListBoxFor(m => m.Roles, Model.RolesList, new { @class = "dynamic-dropdown form-control", multiple = "multiple", title = Locale.ToolTip_Roles })
                                @Html.ValidationMessageFor(m => m.Roles, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.Facility, new { @class = "col-md-2 control-label" })
                            <div class="col-md-6">
                                @Html.DropDownListFor(m => m.Facility, Model.FacilityList, new { @class = "place-search form-control", multiple = "multiple", title = Locale.ToolTip_Facilities })
                                @Html.ValidationMessageFor(m => m.Facility, "", new { @class = "text-danger" })
                            </div>
                        </div>                                             

                        <div class="form-group">
                            @Html.LabelFor(m => m.PhoneType, new { @class = "col-md-2 control-label" })
                            <div class="col-md-6">
                                @Html.DropDownListFor(m => m.PhoneType, Model.PhoneTypeList, new { @class = "form-control", title = Locale.ToolTip_PhoneType })
                                @Html.ValidationMessageFor(m => m.PhoneType, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(m => m.PhoneNumber, new { @class = "col-md-2 control-label" })
                            <div class="col-md-6">
                                @Html.TextBoxFor(m => m.PhoneNumber, new { @class = "form-control", title = Locale.ToolTip_PhoneType })
                                @Html.ValidationMessageFor(m => m.PhoneNumber, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        
                        <div class="form-group">
                            @Html.LabelFor(m => m.Email, new { @class = "col-md-2 control-label" })
                            <div class="col-md-6">
                                @Html.TextBoxFor(m => m.Email, new { @class = "form-control", title = Locale.ToolTip_UserEmail })
                                @Html.ValidationMessageFor(m => m.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>  

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">
                                <a href="@Url.Action("ViewUser", new { id = Model.Id})" class="btn btn-danger">@Locale.Cancel</a>
                                @if (Model.IsObsolete)
                                {
                                    <button type="submit" data-wait-text="@Locale.PleaseWait" class="btn btn-primary" disabled="disabled" title="@Locale.ToolTip_Submit">@Locale.CannotUpdateNotActive</button>
                                }
                                else
                                {
                                    <button type="submit" data-wait-text="@Locale.PleaseWait" class="btn btn-primary" title="@Locale.ToolTip_Submit">@Locale.Submit</button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="form-group col-md-offset-2 col-md-8">
            <div class="pull-right">
                @if (!Model.IsObsolete)
                {
                    using (Html.BeginForm("Delete", "User", new { id = Model.Id }, FormMethod.Post, new { @class = "inlineForm form-horizontal", role = "form" }))
                    {
                        @Html.AntiForgeryToken()

                        <button type="submit" data-wait-text="@Locale.PleaseWait" class="btn btn-danger">
                            @Locale.Deactivate
                            <span class="glyphicon glyphicon-remove"></span>
                        </button>
                    }
                }
                else
                {
                    using (Html.BeginForm("Activate", "User", new { id = Model.Id }, FormMethod.Post, new { @class = "inlineForm form-horizontal", role = "form" }))
                    {
                        @Html.AntiForgeryToken()

                        <button type="submit" data-wait-text="@Locale.PleaseWait" class="btn btn-success">
                            @Locale.Activate
                            <span class="glyphicon glyphicon-upload"></span>
                        </button>
                    }
                }
            </div>
        </div>
    </div>
</div>


@Html.Partial("_UserRolesPartial", Model.UserRoles)

@section scripts
{
    <script type="text/javascript">
        $(document).ready(function () {
            $('.dynamic-dropdown').select2({
                tags: false,
                tokenSeparators: [','],
                width: '100%'
            });

            $('.dynamic-dropdown-multiple').select2({

                createTag: function (params) {
                    var term = $.trim(params.term);

                    if (!term.match(@Constants.RegExSelect2StringInput)) {
                        return null;
                    }
                    return {
                        id: term,
                        text: term,
                        newTag: true
                    }
                },

                "language": {
                    "noResults": function () {
                        return "@Locale.Select2SpecialCharErrorMessage";
                    }
                },
                escapeMarkup: function (markup) {
                    return markup;
                },

                tags: true,
                tokenSeparators: [','],
                width: '100%',
                maximumInputLength: 100
            });

            $('#userRolesTable').DataTable({
                "language":
                {
                    "url": "/Content/datatable-locales/" + getCookie("@LocalizationConfig.LanguageCookieName") + ".json"
                },
                order: [],
                columns: [
                  { "orderable": false },
                  null,
                  null
                ]
            });
        });
    </script>
}
