@model OpenIZAdmin.Models.OrganizationModels.EditOrganizationModel
@{
    ViewBag.Title = Locale.Edit + " " + Locale.Organization;
}

@using (Html.BeginForm("Edit", "Organization", null, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    <div class="panel panel-default">
        <div class="panel-heading">
            <span class="panel-title">@(Locale.Edit + " " + Locale.Organization)</span>
        </div>
        <div class="panel panel-body">

            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.Id)

            <div class="form-group">
                @Html.LabelFor(m => m.Name, new { @class = "col-md-2 control-label" })
                <div class="col-md-8">
                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control", title = Locale.ToolTip_DeviceName })
                    @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.IndustryConcept, new { @class = "col-md-2 control-label" })
                <div class="col-md-8">
                    @Html.DropDownListFor(m => m.IndustryConcept, Model.IndustryConcepts, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.IndustryConcept, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <a href="@(Request.UrlReferrer ?? new Uri(Request.Url.GetLeftPart(UriPartial.Authority)))" class="btn btn-danger">@Locale.Cancel</a>
                    <button type="submit" class="btn btn-primary" title="@Locale.ToolTip_Submit">@Locale.Submit</button>
                </div>
            </div>
        </div>
    </div>

    @*<div class="panel panel-default">
        <div class="panel-heading">
            <span class="panel-title">@(Locale.Edit + " " + Locale.Identifiers)</span>
            <div class="pull-right">
                <span class="text-primary h4">@Locale.New</span>
                <button type="button" id="add-new-identifier" class="glyphicon glyphicon-plus-sign"></button>
            </div>
        </div>

        <div class="panel panel-body">
            @foreach (var identifier in Model.Identifiers)
                            {
                                @Html.EditorFor(m => identifier, "_EditIdentifierTemplate", identifier.Id)
                }

            <div id="identifiers">
                @for (int i = 0; i < Model.Identifiers.Count; i++)
                {
                    <div class="edit-identifier-group" id="@Model.Identifiers[i].Id">
                        @Html.HiddenFor(m => Model.Identifiers[i].Id)
                        <div class="form-group">
                            @Html.LabelFor(m => Model.Identifiers[i].Type, new { @class = "col-md-2 control-label" })
                            <div class="col-md-2">
                                @Html.DropDownListFor(m => Model.Identifiers[i].Type, Model.TypeList, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => Model.Identifiers[i].Type, "", new { @class = "text-danger" })
                            </div>

                            @Html.LabelFor(m => Model.Identifiers[i].Value, new { @class = "col-md-2 control-label" })
                            <div class="col-md-4">
                                @Html.TextBoxFor(m => Model.Identifiers[i].Value, new { @class = "form-control" })
                                @Html.ValidationMessageFor(m => Model.Identifiers[i].Value, "", new { @class = "text-danger" })
                            </div>

                            <button type="button" class="btn btn-danger remove-identifier" data-id="@Model.Identifiers[i].Id">@Locale.Delete</button>
                        </div>
                    </div>
}
            </div>
        </div>
    </div>*@
}

@section Scripts
{
    <script type="text/javascript">
        $(document).ready(function ()
        {
            $("#add-new-identifier").on("click", function (event)
            {
                event.preventDefault();

                $.ajax('/EntityIdentifier/EditIdentifier',
                {
                    method: "GET",
                    success: function (data)
                    {
                        $("#identifiers").append(data);
                    },
                    error: function (error)
                    {
                        console.log(error);
                    }
                });
            });

            $(".remove-identifier").on("click", function ()
            {
                $("#" + $(this).attr("data-id")).remove();
                reindexForm();
            });
        });

        function reindexForm()
        {
            $(".edit-identifier-group").each(function (index, value)
            {
                $(this).find('#Type').first().attr('name', 'Identifiers[' + (index) + '].Type');
                $(this).find('#Value').first().attr('name', 'Identifiers[' + (index) + '].Value');
            });
        }
    </script>
}