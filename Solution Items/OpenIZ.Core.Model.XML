<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenIZ.Core.Model</name>
    </assembly>
    <members>
        <member name="T:OpenIZ.Core.Model.Acts.Act">
            <summary>
            Represents the base class for an act
            </summary>
            <remarks>
            <para>
            An Act, in the context of the reference information model (RIM) represents something that is done to a patient. More precisely, an Act
            is anything that occurs involving entities in which the entity's state is changed or is documented.
            </para>
            <para>
            Examples of Acts Include:
            </para>
            <list type="bullet">
                <item><see cref="T:OpenIZ.Core.Model.Acts.SubstanceAdministration"/> - The administration of a substance to a patient</item>
                <item><see cref="T:OpenIZ.Core.Model.Acts.Observation"/> - The observing of a value for the patient</item>
                <item><see cref="T:OpenIZ.Core.Model.Acts.PatientEncounter"/> - An encounter or visit that occurs where the patient receives one or more services</item>
                <item><see cref="T:OpenIZ.Core.Model.Acts.Act"/> - Any other action such as supply request, or problem recordation</item>
            </list>
            <para>
            The property which classifies what specific type of action an act represents is its <see cref="P:OpenIZ.Core.Model.Acts.Act.ClassConceptKey"/>, which dictates
            what type an act is. Class concept keys can be found in here <see cref="T:OpenIZ.Core.Model.Constants.ActClassKeys"/>.
            </para>
            <para>
            This structure is used to represent events, proposals, and requests. That is to say, the Act structure can represent the request to 
            do an act, the intent to perform an act, or the actual act being performed itself. This classification of mode happens based on the 
            <see cref="P:OpenIZ.Core.Model.Acts.Act.MoodConceptKey"/> mood concept. Mood concept keys can be found on the <see cref="T:OpenIZ.Core.Model.Constants.ActMoodKeys"/> structure.
            </para>
            </remarks>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Act.#ctor">
            <summary>
            Constructor for ACT
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.IsNegated">
            <summary>
            Gets or sets an indicator which identifies whether the act actually occurred, or
            specifically did not occur
            </summary>
            <remarks>
            The isNegated flag is important when the OpenIZ system needs to keep track that an event
            specifically DID NOT OCCUR, or SHOULD NOT OCCUR. Typically this is paired with a reason concept (<see cref="P:OpenIZ.Core.Model.Acts.Act.ReasonConceptKey"/>)
            which describes why  the act did not or should not occur.
            </remarks>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.ActTime">
            <summary>
            Gets or sets the instant in time when the act occurred (if applicable)
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.TemplateKey">
            <summary>
            Gets the template key
            </summary>
            <remarks>
            Templates are used to classify the specific rules and input forms used to create the act. It further
            classifies the type of act in a manner which allows a consumer to render the data or to validate the data.
            </remarks>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.Template">
            <summary>
            Gets or sets the template definition
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.ActTimeXml">
            <summary>
            Gets or sets the creation time in XML format
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.StartTime">
            <summary>
            Gets or sets the time when the act should or did start ocurring
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.StartTimeXml">
            <summary>
            Gets or sets the creation time in XML format
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.StopTime">
            <summary>
            Gets or sets the time when the act did or should stop occurring
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.StopTimeXml">
            <summary>
            Gets or sets the creation time in XML format
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.ClassConceptKey">
            <summary>
            Gets or sets the key of the concept which classifies the act.
            </summary>
            <see cref="P:OpenIZ.Core.Model.Acts.Act.ClassConcept"/>
            <see cref="T:OpenIZ.Core.Model.Constants.ActClassKeys"/>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.MoodConceptKey">
            <summary>
            Gets or sets the key of the concept which specifies the mood of the act.
            </summary>
            <see cref="P:OpenIZ.Core.Model.Acts.Act.MoodConcept"/>
            <see cref="T:OpenIZ.Core.Model.Constants.ActMoodKeys"/>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.ReasonConceptKey">
            <summary>
            Gets or sets the key of the concept which defines the reason why the act is or didn't occur
            </summary>
            <see cref="P:OpenIZ.Core.Model.Acts.Act.ReasonConcept"/>
            <see cref="T:OpenIZ.Core.Model.Constants.ActReasonKeys"/>
            <see cref="T:OpenIZ.Core.Model.Constants.NullReasonKeys"/>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.StatusConceptKey">
            <summary>
            Gets or sets the key of the concept which describes the current status of the act
            </summary>
            <see cref="P:OpenIZ.Core.Model.Acts.Act.StatusConcept"/>
            <see cref="T:OpenIZ.Core.Model.Constants.StatusKeys"/>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.TypeConceptKey">
            <summary>
            Gets or sets the key of the conccept which further classifies the type of act occurring
            </summary>
            <see cref="P:OpenIZ.Core.Model.Acts.Act.TypeConcept"/>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.ClassConcept">
            <summary>
            Gets or sets the concept which classifies the type of act
            </summary>
            <remarks>
            The class concept is used to classify the overall type of the act. This code will specify whether the 
            act is a substance administration, financial transaction, observation, etc.
            </remarks>
            <see cref="T:OpenIZ.Core.Model.Constants.ActClassKeys"/>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.MoodConcept">
            <summary>
            Gets or sets the concept which specifies the mood of the act
            </summary>
            <remarks>
            Here the mood of the act is used to describe the mode of the act or specifically to classify 
            whether the act did occur (event ocurrence), should occur (propose), will occur (intent), or being requested to occur (request).
            </remarks>
            <see cref="T:OpenIZ.Core.Model.Constants.ActMoodKeys"/>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.ReasonConcept">
            <summary>
            Gets or sets the concept which indicates the reason of the act
            </summary>
            <remarks>
            This concept is used to dictate why the act did occur (or if the negation indicator or mood concept indicate, why it didn't or shouldn't occur). Examples
            of reason codes may be "patient was too old", "out of stock", "patient has allergy", etc.
            </remarks>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.StatusConcept">
            <summary>
            Gets or sets the current status concept of the act
            </summary>
            <remarks>
            The status of the act will dictate which part of the lifecycle an act is 
            currently operating in.
            <list type="bullet">
                <item>New - The Act is brand new and has yet to start ocurring</item>
                <item>Active - The Act is still occurring</item>
                <item>Completed - The Act has completed or is in the past</item>
                <item>Obsolete - The Act did occur, however it is no longer accurate</item>
                <item>Nullified - The Act never occurred, this record was created in error</item>
            </list>
            </remarks>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.TypeConcept">
            <summary>
            Type concept identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.Identifiers">
            <summary>
            Gets or sets the identifiers by which this act is known as in other systems
            </summary>
            <remarks>
            The identifiers field is used to assign alternate identifiers to the act itself. These identifiers can 
            be used internally for tracking the act, or can be used to correlate an act in a way that an external system
            will know it.
            </remarks>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.Relationships">
            <summary>
            Gets a list of all associated acts for this act
            </summary>
            <remarks>
            The relationships of an act are used to relate one or more acts together either 
            directly as in an encounter with component acts, or between care episodes for chronic
            care.
            </remarks>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.Policies">
            <summary>
            Gets or sets the security policy instances associated with the act
            </summary>
            <remarks>
            This property allows authors to tag an act with a particular security policy. Here the 
            security policies may be something akin to "Taboo information" or "Research Only". From there
            the OpenIZ policy decision point will determine whether or not the particular piece of
            data should be exposed or masked based on user credentials.
            </remarks>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.Extensions">
            <summary>
            Gets a list of all extensions associated with the act
            </summary>
            <remarks>
            An extension allows developers to store additional data about a particular act in a manner
            which the original OpenIZ authors did not intend. This can be things such as equipment 
            used to record an observation, etc. 
            <para>
            The key difference beetween an extension and a tag is that extensions are versioned whereas tags
            are not
            </para>
            </remarks>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.Notes">
            <summary>
            Gets a list of all notes associated with the act
            </summary>
            <remarks>Allows one or more notes to be taken about an act by a clinician</remarks>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.Tags">
            <summary>
            Gets a list of all tags associated with the act
            </summary>
            <remarks>
            A tag is a simple piece of data which is appended to an act which allows developers to 
            extend the underlying application in ways not imagined by the original OpenIZ team. Tags differ
            from extensions in that they can only carry simple values (strings) and they are not versioned. 
            </remarks>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.Protocols">
            <summary>
            Identifies protocols attached to the act
            </summary>
            <remarks>
            The protocols element is used to track which clinical protocols where linked with 
            the act.
            </remarks>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.Participations">
            <summary>
            Gets or sets the entities and participations they play in the act
            </summary>
            <remarks>
            In an Act, one or more entities participate in the carrying out of the act. This property is used to 
            track that information. Examples of participations include:
            <list type="bullet">
                <item>Consumable - An entity that was consumed in the process of carrying out the act</item>
                <item>Product - A product that was administered or used to perform the act</item>
                <item>Author - The person who recorded the information related to the act</item>
                <item>Performer - The person(s) who performed the act</item>
                <item>Location - Where the act took place</item>
            </list>
            </remarks>
            <see cref="T:OpenIZ.Core.Model.Constants.ActParticipationKey"/>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Act.Refresh">
            <summary>
            Forces the delay load properties in this type to reload
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Act.ShouldSerializeReasonConceptKey">
            <summary>
            True if reason concept key should be serialized
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Act.Clean">
            <summary>
            Clean the patient of any empty "noise" elements
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Act.SemanticEquals(System.Object)">
            <summary>
            Semantic equality function
            </summary>
            <see cref="M:OpenIZ.Core.Model.IdentifiedData.SemanticEquals(System.Object)"/>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Act.ShouldSerializeRelationships">
            <summary>
            Should serialize relationships?
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Act.ShouldSerializeIdentifiers">
            <summary>
            Should serialize identifiers
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Act.ShouldSerializeExtensions">
            <summary>
            Should serialize extensions?
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Act.ShouldSerializeNotes">
            <summary>
            Should serialize notes
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Act.ShouldSerializeParticipations">
            <summary>
            Should serialize participations
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Act.ShouldSerializeTags">
            <summary>
            Should serialize tags
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Act.ShouldSerializeProtocols">
            <summary>
            Should serialize protocols
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Act.ShouldSerializeTemplateKey">
            <summary>
            Should serialize template key
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Act.ShouldSerializePolicies">
            <summary>
            Should serialize policies
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Act.OpenIZ#Core#Model#Interfaces#ITaggable#Tags">
            <summary>
            Gets the tags
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Act.Copy">
            <summary>
            Copies the entity
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.ActParticipation">
            <summary>
            Associates an entity which participates in an act
            </summary>
            <remarks>
            <para>
            An act participation instance is used to link an <see cref="T:OpenIZ.Core.Model.Entities.Entity"/> entity instance to an <see cref="P:OpenIZ.Core.Model.Acts.ActParticipation.Act"/> act instance. It is said that the
            player (<see cref="P:OpenIZ.Core.Model.Acts.ActParticipation.PlayerEntityKey"/>) participates in the act (<see cref="P:OpenIZ.Core.Model.Acts.ActParticipation.ActKey"/>) in a particular role (<see cref="P:OpenIZ.Core.Model.Acts.ActParticipation.ParticipationRoleKey"/>).
            </para>
            <para>
            Act participations can also be quantified. For example, if 100 doses of a particlar material (<see cref="T:OpenIZ.Core.Model.Entities.ManufacturedMaterial"/>) were consumed
            as part of an act, then the quantity would be 100.
            </para>
            </remarks>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActParticipation.#ctor">
            <summary>
            Default constructor for act participation
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActParticipation.#ctor(System.Nullable{System.Guid},OpenIZ.Core.Model.Entities.Entity)">
            <summary>
            Act participation relationship between <paramref name="roleType" /> and <paramref name="player" />
            </summary>
            <param name="roleType">Type of the role.</param>
            <param name="player">The player.</param>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActParticipation.#ctor(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Entity relationship between <paramref name="roleType" /> and <paramref name="playerKey" />
            </summary>
            <param name="roleType">Type of the role.</param>
            <param name="playerKey">The player key.</param>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActParticipation.PlayerEntityKey">
            <summary>
            Gets or sets the target entity reference
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActParticipation.ParticipationRoleKey">
            <summary>
            Gets or sets the participation role key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActParticipation.PlayerEntity">
            <summary>
            Gets or sets the entity which participated in the act
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActParticipation.ParticipationRole">
            <summary>
            Gets or sets the role that the entity played in participating in the act
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActParticipation.ActKey">
            <summary>
            The entity that this relationship targets
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActParticipation.Act">
            <summary>
            The entity that this relationship targets
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActParticipation.Quantity">
            <summary>
            Gets or sets the quantity of player in the act
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActParticipation.Refresh">
            <summary>
            Forces a delay load from the underlying model
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActParticipation.Clean">
            <summary>
            Clean
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActParticipation.IsEmpty">
            <summary>
            Determine if this is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActParticipation.SemanticEquals(System.Object)">
            <summary>
            Determine equality
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActParticipation.ShouldSerializeSourceEntityKey">
            <summary>
            Don't serialize source entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActParticipation.ShouldSerializeQuantity">
            <summary>
            Should serialize quantity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActParticipation.ShouldSerializeActKey">
            <summary>
            Should serialize act key
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActParticipation.ToString">
            <summary>
            Represent as string
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.ActProtocol">
            <summary>
            Represents information related to the clinical protocol to which an act is a member of
            </summary>
            <remarks>
            The <see cref="T:OpenIZ.Core.Model.Acts.ActProtocol"/> class is used to link an act instance (<see cref="T:OpenIZ.Core.Model.Acts.Act"/>) with the clinical 
            protocol (<see cref="P:OpenIZ.Core.Model.Acts.ActProtocol.Protocol"/>) to which the act belongs.
            </remarks>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActProtocol.ProtocolKey">
            <summary>
            Gets or sets the protocol  to which this act belongs
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActProtocol.Protocol">
            <summary>
            Gets or sets the protocol data related to the protocol
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActProtocol.Sequence">
            <summary>
            Represents the sequence of the act in the protocol
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActProtocol.StateData">
            <summary>
            Represents any state data related to the act / protocol link
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActProtocol.SemanticEquals(System.Object)">
            <summary>
            Determines equality of this association
            </summary>
            <param name="obj">The object.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActProtocol.ShouldSerializeSourceEntityKey">
            <summary>
            Shoud serialize source
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.ActRelationship">
            <summary>
            Used to link two or more acts together
            </summary>
            <remarks>
            <para>
            An act relationship is used to link a source act with a target act (<see cref="P:OpenIZ.Core.Model.Acts.ActRelationship.TargetActKey"/>) in a particular type of 
            relationship (<see cref="P:OpenIZ.Core.Model.Acts.ActRelationship.RelationshipTypeKey"/>). This structure is often used to link together sub-components of an 
            encounter with the encounter, but can also be used to link together chronic care episodes.
            </para>
            </remarks>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActRelationship.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenIZ.Core.Model.Acts.ActRelationship"/> class.
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActRelationship.#ctor(System.Nullable{System.Guid},OpenIZ.Core.Model.Acts.Act)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenIZ.Core.Model.Acts.ActRelationship"/> class.
            </summary>
            <param name="relationshipType">Type of the relationship.</param>
            <param name="target">The target.</param>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActRelationship.#ctor(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenIZ.Core.Model.Acts.ActRelationship"/> class.
            </summary>
            <param name="relationshipType">Type of the relationship.</param>
            <param name="targetKey">The target key.</param>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActRelationship.TargetActKey">
            <summary>
            The target of the association
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActRelationship.TargetAct">
            <summary>
            Target act reference
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActRelationship.RelationshipTypeKey">
            <summary>
            Association type key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.ActRelationship.RelationshipType">
            <summary>
            Gets or sets the association type
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActRelationship.Refresh">
            <summary>
            Refreshes the model to force reload from underlying model
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActRelationship.IsEmpty">
            <summary>
            Empty?
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActRelationship.SemanticEquals(System.Object)">
            <summary>
            Determine semantic equality
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ActRelationship.ToString">
            <summary>
            To string
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.CarePlan">
            <summary>
            Represents a care plan
            </summary>
            <remarks>
            The care plan object is used to represent a collection of clinical protocols which the care planning
            engine proposes should be done as part of the patient's course of care.
            </remarks>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.CarePlan.Target">
            <summary>
            Target of the careplan
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.CarePlan.Action">
            <summary>
            Action to take
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.CarePlan.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.CarePlan.#ctor(OpenIZ.Core.Model.Roles.Patient,System.Collections.Generic.IEnumerable{OpenIZ.Core.Model.Acts.Act})">
            <summary>
            Create care plan with acts
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.CarePlan.CreateCarePlanRequest(OpenIZ.Core.Model.Roles.Patient)">
            <summary>
            Create a care plan request
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.ControlAct">
            <summary>
            Represents an act which indicates why data was created/changed
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.ControlAct.#ctor">
            <summary>
            Control act
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.Observation">
            <summary>
            Represents a act (<see cref="T:OpenIZ.Core.Model.Acts.Act"/>) which is an observation
            </summary>
            <remarks>
            <para>
            The observation class itself is an abstract class which is generically used to represent something that is observed about a patient.
            </para>
            <para>
            It is not recommended to use this class directly, rather one of its sub classes based on the type of observation being made such as:
            </para>
            <list type="bullet">
                <item>Coded observation (<see cref="T:OpenIZ.Core.Model.Acts.CodedObservation"/>) for observations whose values are codified (example: blood type, presentation, etc.), </item>
                <item>Quantity observations (<see cref="T:OpenIZ.Core.Model.Acts.QuantityObservation"/>) for observations whose values are quantified values (example: weight, height, etc.), </item>
                <item>Text observations (<see cref="T:OpenIZ.Core.Model.Acts.TextObservation"/>) for observations whose values are textual in nature.</item>
            </list>
            <para>
            No matter what type of value an observation carries (coded, quantity, text) it is always classified by the type concept (<see cref="P:OpenIZ.Core.Model.Acts.Act.TypeConceptKey"/>).
            </para>
            </remarks>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Observation.#ctor">
            <summary>
            Observation ctor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Observation.InterpretationConceptKey">
            <summary>
            Gets or sets the interpretation concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Observation.ValueType">
            <summary>
            Value type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Observation.InterpretationConcept">
            <summary>
            Gets or sets the concept which indicates the interpretation of the observtion
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Observation.Refresh">
            <summary>
            Refresh the object forcing delay load 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Observation.SemanticEquals(System.Object)">
            <summary>
            Semantic equality function
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Observation.ShouldSerializeValueType">
            <summary>
            Should serialize value type?
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.QuantityObservation">
            <summary>
            Represents an observation that contains a quantity
            </summary>
            <remarks>
            The quantity observation class should be used whenever you wish to store an observation which carries a numerical value 
            and an optional unit of measure (example: length = 3.2 ft, weight = 1.2 kg, etc.)
            </remarks>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.QuantityObservation.Value">
            <summary>
            Gets or sets the observed quantity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.QuantityObservation.ValueType">
            <summary>
            Value type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.QuantityObservation.UnitOfMeasureKey">
            <summary>
            Gets or sets the key of the uom concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.QuantityObservation.UnitOfMeasure">
            <summary>
            Gets or sets the unit of measure
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.QuantityObservation.Refresh">
            <summary>
            Forces a refresh of the object
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.QuantityObservation.SemanticEquals(System.Object)">
            <summary>
            Semantic equality function
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.TextObservation">
            <summary>
            Represents an observation with a text value
            </summary>
            <remarks>
            The text observation type represents an observation made with a textual value. This is done whenever an observation type 
            cannot be quantified or classified using either a coded or observed value. Please note that this type should not be used
            for taking notes, rather it is a specific type of thing observed about a patient. For example: Interpretation of patient's mood
            </remarks>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.TextObservation.ValueType">
            <summary>
            Value type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.TextObservation.Value">
            <summary>
            Gets or sets the textual value
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.TextObservation.SemanticEquals(System.Object)">
            <summary>
            Semantic equality function
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.CodedObservation">
            <summary>
            Represents an observation with a concept value
            </summary>
            <remarks>
            A coded observation represents an observation whose value is classified using a coded concept. For example: fetal presentation, 
            stage of pregnancy, etc.
            </remarks>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.CodedObservation.ValueType">
            <summary>
            Value type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.CodedObservation.ValueKey">
            <summary>
            Gets or sets the key of the uom concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.CodedObservation.Value">
            <summary>
            Gets or sets the coded value of the observation
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.CodedObservation.Refresh">
            <summary>
            Forces a refresh of underlying data
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.CodedObservation.SemanticEquals(System.Object)">
            <summary>
            Semantic equality function
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.PatientEncounter">
             <summary>
             Represents an encounter a patient has with the health system
             </summary>
            <remarks>
            <para>An encounter is a special type of act which represents an episode of care which a patient experiences with the health system. 
            An encounter is used to document things like hospital visits, inpatient care encounters, or any longer running series of actions which 
            are linked by the admit -&gt; discharge workflow.</para>
             </remarks>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.PatientEncounter.#ctor">
            <summary>
            Patient encounter ctor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.PatientEncounter.DischargeDispositionKey">
            <summary>
            Gets or sets the key of discharge disposition
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.PatientEncounter.DischargeDisposition">
            <summary>
            Gets or sets the discharge disposition (how the patient left the encounter
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.PatientEncounter.Refresh">
            <summary>
            Refresh forcing delay load
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.PatientEncounter.SemanticEquals(System.Object)">
            <summary>
            Semantic equality function
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.Protocol">
            <summary>
            Represents the model of a clinical protocol
            </summary>
            <remarks>
            <para>The protocol type is used to store and retrieve the particular definition of a clinical protocol. In 
            OpenIZ, a clinical protocol represents a series of steps that *should* be taken by a clinician when caring for 
            a patient.</para>
            <para>
            A series of proposed steps generated by these protocol definitions are used to represent a care plan (<see cref="T:OpenIZ.Core.Model.Acts.CarePlan"/>).
            </para>
            </remarks>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Protocol.Name">
            <summary>
            Gets or sets the name of the protocol
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Protocol.HandlerClass">
            <summary>
            Gets or sets the handler for this protocol (which can load the definition
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Protocol.HandlerClassName">
            <summary>
            Gets or sets the handler class AQN
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Protocol.Definition">
            <summary>
            Contains instructions which the handler class can understand
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.Protocol.Oid">
            <summary>
            Gets or sets the OID
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.Protocol.SemanticEquals(System.Object)">
            <summary>
            Semantic equality
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Acts.SubstanceAdministration">
            <summary>
            Represents an act whereby a substance is administered to the patient
            </summary>
            <remarks>
            <para>The substance administration act is used whenever a clinician administers, plans to administer or should administer to a patient, a substance. 
            The substance that is administered is open but should be represented as either a Consumable (something that was consumed in the act of administration 
            like a manufactured material (<see cref="T:OpenIZ.Core.Model.Entities.ManufacturedMaterial"/>) or a product (if proposing or planning)).</para>
            <para>
            The type of administration (immunization, drug therapy, treatment, etc.) is classified by the substance administration's type concept (<see cref="P:OpenIZ.Core.Model.Acts.Act.TypeConceptKey"/>). In some cases
            the dose quantity or dose measure are not required (when giving just "a dose") however it is recommended that implementations accurately track
            how much of the substance was administered.
            </para>
            </remarks>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.SubstanceAdministration.#ctor">
            <summary>
            Substance administration ctor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.SubstanceAdministration.RouteKey">
            <summary>
            Gets or sets the key for route
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.SubstanceAdministration.DoseUnitKey">
            <summary>
            Gets or sets the key for dosing unit
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.SubstanceAdministration.Route">
            <summary>
            Gets or sets a concept which indicates the route of administration (eg: Oral, Injection, etc.)
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.SubstanceAdministration.DoseUnit">
            <summary>
            Gets or sets a concept which indicates the unit of measure for the dose (eg: 5 mL, 10 mL, 1 drop, etc.)
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.SubstanceAdministration.DoseQuantity">
            <summary>
            Gets or sets the amount of substance administered
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.SubstanceAdministration.SequenceId">
            <summary>
            The sequence of the dose (i.e. OPV 0 = 0 , OPV 1 = 1, etc.)
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.SubstanceAdministration.SiteKey">
            <summary>
            Gets or sets the site
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Acts.SubstanceAdministration.Site">
            <summary>
            Gets or sets a concept which indicates the site of administration
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.SubstanceAdministration.Refresh">
            <summary>
            Force delay loading of properties
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.SubstanceAdministration.SemanticEquals(System.Object)">
            <summary>
            Semantic equality function
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Acts.SubstanceAdministration.ShouldSerializeSiteKey">
            <summary>
            Should serialize site key
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenIZ.Core.Model.Attributes.AutoLoadAttribute">
            <summary>
            Auto load attribute
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Attributes.AutoLoadAttribute.#ctor">
            <summary>
            Auto load
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Attributes.AutoLoadAttribute.#ctor(System.String)">
            <summary>
            Load on attribute
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Attributes.AutoLoadAttribute.ClassCode">
            <summary>
            Gets or sets the value when the class code is true to auto-load
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Attributes.BindingAttribute">
            <summary>
            Binding attributes to suggest what values can be used in a property
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Attributes.BindingAttribute.#ctor(System.Type)">
            <summary>
            Binding attribute
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Attributes.BindingAttribute.Binding">
            <summary>
            Gets or sets the type binding
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Attributes.ClassifierAttribute">
            <summary>
            Classifier attribute used to mark a class' classifier
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Attributes.ClassifierAttribute.#ctor(System.String)">
            <summary>
            Classifier attribute property
            </summary>
            <param name="classProperty"></param>
        </member>
        <member name="P:OpenIZ.Core.Model.Attributes.ClassifierAttribute.ClassifierProperty">
            <summary>
            Gets or sets the classifier property
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Attributes.DataIgnoreAttribute">
            <summary>
            Identifies that a property containins no meaningful data 
            and is provided only for serialization
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Attributes.KeyLookupAttribute">
            <summary>
            Identifies to the persistence layer what property can be used for lookup when a key is not present
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Attributes.KeyLookupAttribute.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Attributes.KeyLookupAttribute.UniqueProperty">
            <summary>
            Gets or sets whether the persistence engine should throw an exception when persisting duplicates
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Attributes.NonCachedAttribute">
            <summary>
            Instructs any data caching that the object should not be cached
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Attributes.SerializationReferenceAttribute">
            <summary>
            Identifies where tools can find the serialization information
            for an ignored property
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Attributes.SerializationReferenceAttribute.#ctor(System.String)">
            <summary>
            The redirection attribute
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Attributes.SerializationReferenceAttribute.RedirectProperty">
            <summary>
            Identifies where the serialization information can be found
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Attributes.SerializationReferenceAttribute.GetProperty(System.Type)">
            <summary>
            Get property from the type
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Attributes.SimpleValueAttribute">
            <summary>
            Identifies the simple value
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Attributes.SimpleValueAttribute.#ctor(System.String)">
            <summary>
            Classifier attribute property
            </summary>
            <param name="valueProperty"></param>
        </member>
        <member name="P:OpenIZ.Core.Model.Attributes.SimpleValueAttribute.ValueProperty">
            <summary>
            Gets or sets the classifier property
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.BaseEntityData">
            <summary>
            Represents the root of all model classes in the OpenIZ Core
            </summary>
            <remarks>
            This abstract class is used to encapsulate the key properties of base data elements in the OpenIZ
            model, namely it keeps track of which entities created and obsoleted a particular resource and when those
            events occurred.
            </remarks>
        </member>
        <member name="M:OpenIZ.Core.Model.BaseEntityData.#ctor">
            <summary>
            Constructs a new base entity data
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.BaseEntityData.CreationTime">
            <summary>
            Gets or sets the time at which the data was created
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.BaseEntityData.CreationTimeXml">
            <summary>
            Gets or sets the creation time in XML format
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.BaseEntityData.ObsoletionTime">
            <summary>
            Gets or sets the time when the data is or will become invalid
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.BaseEntityData.ObsoletionTimeXml">
            <summary>
            Gets or sets the creation time in XML format
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.BaseEntityData.CreatedBy">
            <summary>
            Gets or sets the user that created this base data
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.BaseEntityData.ModifiedOn">
            <summary>
            Gets the time that the object was last modified (from base data, default to CreationTime)
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.BaseEntityData.ShouldSerializeCreatedByKey">
            <summary>
            True if key should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.BaseEntityData.ShouldSerializeObsoletedByKey">
            <summary>
            True if key should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenIZ.Core.Model.BaseEntityData.ObsoletedBy">
            <summary>
            Gets or sets the user that obsoleted this base data
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.BaseEntityData.CreatedByKey">
            <summary>
            Gets or sets the identifier of the user which created the data
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.BaseEntityData.ObsoletedByKey">
            <summary>
            Gets or sets the identifier of the user which obsoleted the data
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.BaseEntityData.ToString">
            <summary>
            Represent the data as a string
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.BaseEntityData.Refresh">
            <summary>
            Clears delay load properties forcing a refresh
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Association`1">
            <summary>
            Represents a bse class for bound relational data
            </summary>
            <typeparam name="TSourceType"></typeparam>
        </member>
        <member name="P:OpenIZ.Core.Model.Association`1.ModifiedOn">
            <summary>
            Get the modification date
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Association`1.SourceEntityKey">
            <summary>
            Gets or sets the source entity's key (where the relationship is FROM)
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Association`1.SourceEntity">
            <summary>
            The entity that this relationship targets
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Association`1.ShouldSerializeSourceEntityKey">
            <summary>
            Should serialize obsolete
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Association`1.Refresh">
            <summary>
            Force delay load properties to reload
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Association`1.SemanticEquals(System.Object)">
            <summary>
            Determines equality of this association
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Collection.Bundle">
            <summary>
            Represents a collection of model items 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Collection.Bundle.#ctor">
            <summary>
            Create new bundle
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Collection.Bundle.ModifiedOn">
            <summary>
            Gets the time the bundle was modified
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Collection.Bundle.Clean">
            <summary>
            Clean the bundle
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenIZ.Core.Model.Collection.Bundle.Item">
            <summary>
            Gets or sets items in the bundle
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Collection.Bundle.EntryKey">
            <summary>
            Entry into the bundle
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Collection.Bundle.Entry">
            <summary>
            Gets the entry object
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Collection.Bundle.Offset">
            <summary>
            Gets or sets the count in this bundle
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Collection.Bundle.Count">
            <summary>
            Gets or sets the count in this bundle
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Collection.Bundle.TotalResults">
            <summary>
            Gets or sets the total results
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Collection.Bundle.ExpansionKeys">
            <summary>
            Gets or sets the keys of objects that aren't really in the bundle but are expansion items
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Collection.Bundle.Add(OpenIZ.Core.Model.IdentifiedData)">
            <summary>
            Add item to the bundle
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Collection.Bundle.Insert(System.Int32,OpenIZ.Core.Model.IdentifiedData)">
            <summary>
            Insert data at the specified index
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Collection.Bundle.HasTag(System.String)">
            <summary>
            True if the bundle has a tag
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Collection.Bundle.CreateBundle(OpenIZ.Core.Model.IdentifiedData,System.Boolean)">
            <summary>
            Create a bundle
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Collection.Bundle.CreateBundle(System.Collections.Generic.IEnumerable{OpenIZ.Core.Model.IdentifiedData},System.Int32,System.Int32)">
            <summary>
            Create a bundle
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Collection.Bundle.Reconstitute">
            <summary>
            Reconstitutes the bundle (takes the flat reference structures and fills them out into proper object references)
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Collection.Bundle.Reconstitute(OpenIZ.Core.Model.IdentifiedData,System.Collections.Generic.HashSet{OpenIZ.Core.Model.IdentifiedData})">
            <summary>
            Re-constitute the data
            </summary>
            <remarks>Basically this will find any refs and fill them in</remarks>
        </member>
        <member name="M:OpenIZ.Core.Model.Collection.Bundle.ProcessModel(OpenIZ.Core.Model.IdentifiedData,OpenIZ.Core.Model.Collection.Bundle,System.Boolean)">
            <summary>
            Packages the objects into a bundle
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Collection.Bundle.GetExpansionItems">
            <summary>
            Gets from the item set only those items which are for expansion
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Collection.Bundle.GetResultItems">
            <summary>
            Gets from the item set only those items which are results
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Collection.ILockable">
            <summary>
            Represents a lockable collection
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Collection.ILockable.GetLocked">
            <summary>
            Get a locked version of the collection
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ActClassKeys">
            <summary>
            Represents a series of class keys for use on acts.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.AccountManagement">
            <summary>
            The act represents generic account management such as adjudications, financial adjustments, stock counting, etc.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.Act">
            <summary>
            The act represents a generic act which has no special classification
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.Battery">
            <summary>
            The act represents a simple battery of procedures/administrations/tests/etc.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.CareProvision">
            <summary>
            The act represents some provision of care such as the seeking out services.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.Condition">
            <summary>
            The act represents a problem or condition which the patient is suffering from.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.ControlAct">
            <summary>
            The control act event key is used to describe an infrastructural act which has no clinical meaning but can be used to wrap technical details.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.Encounter">
            <summary>
            The act represents an encounter such as the patient presenting for care and receiving services during a visit.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.Inform">
            <summary>
            The act represents an attempt to provide additional clinical information.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.Observation">
            <summary>
            The act represents an observation that is made about a patient such as a vital sign, an allergy, cause of death, etc..
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.Procedure">
            <summary>
            The act represents a procedure (something done to a patient).
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.Registration">
            <summary>
            The act represents a registration event such as the registration of a patient.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.SubstanceAdministration">
            <summary>
            The act represents that a substance (medication, or otherwise) was, should, or will be administered to the patient.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.Supply">
            <summary>
            The act represents a supply of some material or financial instrument between entities.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActClassKeys.Transport">
            <summary>
            The physical transporting of materials or people from one place to another.
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ActMoodKeys">
            <summary>
            Act Mood keys
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActMoodKeys.Appointment">
            <summary>
            The ACT represents an appointment that was made to do something
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActMoodKeys.AppointmentRequest">
            <summary>
            The ACT represents a special type of request to create an appointment
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActMoodKeys.Definition">
            <summary>
            The ACT represents a definition of a type of act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActMoodKeys.Eventoccurrence">
            <summary>
            The ACT represents something that has occurred
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActMoodKeys.Goal">
            <summary>
            The ACT represents some sort of GOAL
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActMoodKeys.Intent">
            <summary>
            The ACT represents an intent made by a human to do something
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActMoodKeys.Promise">
            <summary>
            The ACT represents a promise to do something
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActMoodKeys.Propose">
            <summary>
            The ACT represents a proposal that a human should do something
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActMoodKeys.Request">
            <summary>
            The ACT represents a request to do something
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ActParticipationKey">
            <summary>
            Represents the participation concepts which an entity can participate in an act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Admitter">
            <summary>
            The player entity was the person who was responsible for admitting the patient into a facility or care scenario.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Attender">
            <summary>
            The player entity represents the attending physician for the patient
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Authenticator">
            <summary>
            The player entity represents an entity which authenticates the provision of care
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Authororiginator">
            <summary>
            The player entity is responsible for the creation of data described in the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Baby">
            <summary>
            The player is a resultant person in that it was the baby 
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Beneficiary">
            <summary>
            The player is a beneficiary of the act such a receiver of a financial instrument, or other good
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.CallbackContact">
            <summary>
            The player entity represents something that should be contacted upon completion of the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.CausativeAgent">
            <summary>
            The player entity is an agent which caused the act to occur
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Consultant">
            <summary>
            The player entity is acting as a consult to the carrying out of the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Consumable">
            <summary>
            The player entity was or is to be consumed during the process of carrying out the act.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.CoverageTarget">
            <summary>
            The player entity represents the target coverage entity of the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Custodian">
            <summary>
            The player entity is the data custodian of the act (is responsible for storing and securing the act)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.DataEnterer">
            <summary>
            The player entity represents the person or device which phisically entered the data at the terminal
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Destination">
            <summary>
            The player etity represents the ultimate destination of the goods/materials/services described in the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Device">
            <summary>
            The player entity represents the device on which the act or data from the act was acquired or recorded
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.DirectTarget">
            <summary>
            The player entity represents the directed target of care provided in the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Discharger">
            <summary>
            The player entity represents the person who is responsible for the discharging of the patient from an encounter
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Distributor">
            <summary>
            The player entity is the source distribution point for the financial or material instruments contained in the message
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Donor">
            <summary>
            The player entity represents the donor of tissue or materials used in the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.EntryLocation">
            <summary>
            The location where the act was entered.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Escort">
            <summary>
            The player entity was responsible for escorting the patient during the course of the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Exposure">
            <summary>
            The player entity something to which the patient was exposed
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.ExposureAgent">
            <summary>
            The player entity represents the agent (material) to which the patient was exposed
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.ExposureSource">
            <summary>
            The player entity describes the source of the material to which the patient was exposed
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.ExposureTarget">
            <summary>
            The player entity describes the target to which the agent was exposed
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.GuarantorParty">
            <summary>
            The player represents a party which is used as a financial guarantor for payment in the carrying out of the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Holder">
            <summary>
            The player is responsible for holding the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.IndirectTarget">
            <summary>
            The entity not directly present in the act but which will be the focust of th act.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Informant">
            <summary>
            The player was a person or device which informed data presented in the act. (Example: A mother telling a nurse that their child had a reaction)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.InformationRecipient">
            <summary>
            The player entity represents something that should be cc'ed on the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.LegalAuthenticator">
            <summary>
            The player entity is responsible for legally authenticating the content of the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Location">
            <summary>
            The location where the service was performed.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.NonreuseableDevice">
            <summary>
            The player represents a consumable that can no longer be used
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Origin">
            <summary>
            The player represents the origin of the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Participation">
            <summary>
            The player entity participates in the act in no particular classification
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Performer">
            <summary>
            The player entity is responsible for performing the clinical steps documented in the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.PrimaryInformationRecipient">
            <summary>
            The player entity represents a high priority contact which should be informed or cc'ed on the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.PrimaryPerformer">
            <summary>
            The player entity was the primary performer of the act. This is used in procedures where more than one performer is present
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Product">
            <summary>
            The player represents a product that is not necessarily consumed but informs the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Receiver">
            <summary>
            The player represents the entity which is the intended receiver of the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.RecordTarget">
            <summary>
            The player represents the entity to which the act is recorded against
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.ReferredBy">
            <summary>
            The player represents the entity which referred the act or caused the act to be undertaken
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.ReferredTo">
            <summary>
            The player entity represents the entity which was referred to
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Referrer">
            <summary>
            The player entity represents the person who was originally the referrer.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Remote">
            <summary>
            The player entity represents a remote portion of the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.ResponsibleParty">
            <summary>
            The player entity is ultimately responsible for the carrying out of the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.ReusableDevice">
            <summary>
            The player entity represents a device which can be reused in future acts
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.SecondaryPerformer">
            <summary>
            The secondary performing person (support clinician).
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Specimen">
            <summary>
            The player entity represents a specimen collected for the purpose of testing and diagnosis
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Subject">
            <summary>
            The player entity is the subject of an act, but not necessarily the record target (meaning the act is about a particular entity but not to be attached to their record)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Tracker">
            <summary>
            The player entity is responsible for tracking the progress of the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Transcriber">
            <summary>
            The person who transcribed data from the original act.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.UgentNotificationContact">
            <summary>
            The player entity represents a contact entity in case of an emergency occurs during the act.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Verifier">
            <summary>
            The player entity was responsible for verifying the accuracy of the data in the act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Via">
            <summary>
            The player entity represents an entity where the act occurred "via" this entity (i.e. in transport)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActParticipationKey.Witness">
            <summary>
            The player entity represents a legal witness to the act occurring.
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ActReasonKeys">
            <summary>
            Represents act reasons (reasons for an act)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActReasonKeys.StartedTooLate">
            <summary>
            The patient started too late for the therapy
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActReasonKeys.AllergyOrIntolerance">
            <summary>
            The patient is allergic or intolerant to the consumable
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActReasonKeys.Expired">
            <summary>
            The vaccine or drug was expired
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActReasonKeys.VaccineSafety">
            <summary>
            The vaccine was considered unsafe
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActReasonKeys.ProfessionalJudgement">
            <summary>
            The vaccine was not performed per the professional judgement of the provider
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActReasonKeys.ReligiousObjecton">
            <summary>
            The patient had a religious objection
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActReasonKeys.PatientRefused">
            <summary>
            The patient refused the treatment
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActReasonKeys.OutOfStock">
            <summary>
            There was insufficient stock to perform the action
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActReasonKeys.Broken">
            <summary>
            The items are broken and can no longer be used to deliver care
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActReasonKeys.ColdStorageFailure">
            <summary>
            There was a cold-storage failure which resulted in the material being unusable.
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys">
            <summary>
            Act relationship types
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.Appends">
            <summary>
            Indicates that the source act appends information contained in the target act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.Arrival">
            <summary>
            Links the transortation act from another act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.Departure">
            <summary>
            Links a transporation act from another act indicating departure of the subject
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.Documents">
            <summary>
            The source act documents the target act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.EpisodeLink">
            <summary>
            Links two instances of the same act over time (example: chronic conditions)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.Evaluates">
            <summary>
            Used to link a goal to an observation
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.Fulfills">
            <summary>
            Indicates that the source act fulfills the target act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.HasAuthorization">
            <summary>
            Indicates that the target act authorizes the source act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.HasComponent">
            <summary>
            Indicates that the target act is a component of the source act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.HasControlVariable">
            <summary>
            Relationship from an act to one or more control variables (for example: device settings, or environment)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.HasManifestation">
            <summary>
            The assertion that a new observation may be a manifestation of another
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.HasPrecondition">
            <summary>
            Indicates that the target act is a pre-condition of the source act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.HasReason">
            <summary>
            Indicates a reasoning as to why the source act is occurring
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.HasReferenceValues">
            <summary>
            Indicates that the source act contains reference values from the target
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.HasSubject">
            <summary>
            Indicates the subject of a particular act (example: clinical act is a subject of a control act)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.HasSupport">
            <summary>
            Indicates an existing act is suggesting evidence for a new observation.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.IsCauseOf">
            <summary>
            Indicates that the source act is the cause of the target act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.IsDerivedFrom">
            <summary>
            Indicates the source act is derived from information contained in the target act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.IsExcerptOf">
            <summary>
            Indicates that the source act is an excerpt of the target act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.RefersTo">
            <summary>
            Indicates that the source act refers to the target act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.Replaces">
            <summary>
            The source act replaces the target act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.StartsAfterStartOf">
            <summary>
            Indicates that the source act starts after the start of another act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ActRelationshipTypeKeys.Transforms">
            <summary>
            Indicates that the source act transforms the target act
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.IndustryTypeKeys">
            <summary>
            Industry type keys for built-in OpenIZ industry types
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.IndustryTypeKeys.Manufacturing">
            <summary>
            Manufacturing industry
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.IndustryTypeKeys.OtherIndustry">
            <summary>
            Other industry
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.IndustryTypeKeys.HealthDelivery">
            <summary>
            Health delivery industry
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ObservationTypeKeys">
            <summary>
            Represents act type keys related to types of observations that can be made about a patient
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ObservationTypeKeys.Condition">
            <summary>
            The observation is a condition which the patient has
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ObservationTypeKeys.Symptom">
            <summary>
            The observation is a symptom which the patient is presenting
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ObservationTypeKeys.Finding">
            <summary>
            The observtion represents a concrete clinical finding (after performing tests for example)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ObservationTypeKeys.Complaint">
            <summary>
            The observation represents a complaint that the patient has (example: back pain)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ObservationTypeKeys.Functionallimitation">
            <summary>
            The observation represents a functional limitation of the patient (example: paraplegia)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ObservationTypeKeys.Problem">
            <summary>
            The observation represents a known problem that the patient has reported
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ObservationTypeKeys.Diagnosis">
            <summary>
            The observation represents a concrete clinical diagnosis of the patient
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ObservationTypeKeys.Severity">
            <summary>
            The observation represents a severity 
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ObservationTypeKeys.CauseOfDeath">
            <summary>
            The observation represents a cause of death
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ObservationTypeKeys.ClinicalState">
            <summary>
            The observation represents the current clinical state about an entity (example: Clinical State is the patient is Dead)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ObservationTypeKeys.FindingSite">
            <summary>
            The observation represents a finding site where a problem or other observtion was made
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.AddressComponentKeys">
            <summary>
            Represents address component types
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.AdditionalLocator">
            <summary>
            An additional locator (example: Beside the red barn).
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.AddressLine">
            <summary>
            An address line as would appear on an address (example: 123 Main Street West)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.BuildingNumber">
            <summary>
            Identifies a particular building on a street (example: A23 Building)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.BuildingNumberNumeric">
            <summary>
            Identifies a numeric identifier for a building (example: 123)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.BuildingNumberSuffix">
            <summary>
            Identifies a suffix to the building number (example: 123 *SECTOR 7*)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.CareOf">
            <summary>
            Identifies the person where deliveries should be care-of (example: c/o Bob Smith)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.CensusTract">
            <summary>
            The census tract which is used for political counting of the census
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.City">
            <summary>
            The town or city (example: Toronto)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.Country">
            <summary>
            The country in which the address resides (example: Canada)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.County">
            <summary>
            The county or sub-division of a sub-national unit (example: Clark County)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.Delimiter">
            <summary>
            Represents a meaningless delimiter such as dash, or newline
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.DeliveryAddressLine">
            <summary>
            Represents an address line to be used for delivery rather than physical location (example: Loading Dock #4)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.DeliveryInstallationArea">
            <summary>
            Represents the area where the delivery should take place
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.DeliveryInstallationQualifier">
            <summary>
            The delivery installation qualifier.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.DeliveryInstallationType">
            <summary>
            The delivery installation type.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.DeliveryMode">
            <summary>
            The delivery mode.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.DeliveryModeIdentifier">
            <summary>
            The delivery mode identifier.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.Direction">
            <summary>
            Represents a directory such as north, south, east, or west
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.PostalCode">
            <summary>
            A codified adminsitrative unit used to locate the address (zip code or postal code)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.PostBox">
            <summary>
            Represents a PO box where delivery of mail should take place
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.Precinct">
            <summary>
            Represents a precinct or sub-division of a city such as a burrogh
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.State">
            <summary>
            Represents a state or province, or a sub-division of a national boundary
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.StreetAddressLine">
            <summary>
            Represents a physical street delivery line (example: 123 Main Street West)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.StreetName">
            <summary>
            Represents the name portion of a street address (example: Main St.)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.StreetNameBase">
            <summary>
            The street name base portion of a street address (Example: Main)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.StreetType">
            <summary>
            The street type (example: Street, Road, Hwy)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.UnitDesignator">
            <summary>
            Identifies the type of unit (example: Suite, Apartment, Unit)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressComponentKeys.UnitIdentifier">
            <summary>
            The identifier of the unit (example: 820)
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.AddressUseKeys">
            <summary>
            Address use keys
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressUseKeys.Alphabetic">
            <summary>
            Represents an alphabetic address used for matching 
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressUseKeys.BadAddress">
            <summary>
            Represents a bad address, i.e. an address which is old or invalid.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressUseKeys.Direct">
            <summary>
            Represents a workplace address that reaches the person directly without intermediaries.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressUseKeys.HomeAddress">
            <summary>
            The home address
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressUseKeys.Ideographic">
            <summary>
            Represents an address expressed in an ideographic manner (example: Kanji)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressUseKeys.Phonetic">
            <summary>
            Represents an address expressed as a phonetic spelling of an ideographic address
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressUseKeys.PhysicalVisit">
            <summary>
            The address is a physical place where visits should occur
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressUseKeys.PostalAddress">
            <summary>
            The address is a postal address used for the delivery of mail and materials
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressUseKeys.PrimaryHome">
            <summary>
            Represents a primary address to reach a contact after business hours.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressUseKeys.Public">
            <summary>
            Represents an address that is a standard address that may be subject to a switchboard or operator prior to reaching the intended entity.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressUseKeys.Soundex">
            <summary>
            Represents an address used for soundex matching purposes.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressUseKeys.Syllabic">
            <summary>
            Represents a syllabic address.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressUseKeys.TemporaryAddress">
            <summary>
            Represents a temporary address that may be good for visiting or mailing.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressUseKeys.VacationHome">
            <summary>
            Represents a vacation home to reach a person while on vacation.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.AddressUseKeys.WorkPlace">
            <summary>
            Represents an office address, should be used for business communications
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.CodeSystemKeys">
            <summary>
            Code system identifiers
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.CVX">
            <summary>
            Commonn Vaccination Codes (CDC)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.ICD10">
            <summary>
            International Classification of Diseases Version 10
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.ICD10CM">
            <summary>
            International Classification of Diseases Version 10 - Clinical Management 
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.ICD9">
            <summary>
            International Classification of Diseases Version 9
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.ISO6391">
            <summary>
            ISO-639-1 (Language Codes)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.ISO6392">
            <summary>
            ISO639-2 (3 letter Language Codes)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.LOINC">
            <summary>
            Logical Observations Identifiers Names and Codes (maintained by Regenstrief Institute)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.SNOMEDCT">
            <summary>
            Systematized Nomenclature of Medicine-Clinical Terms (maintained by IHTSDO)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.UCUM">
            <summary>
            Universal Codes for the Unit Of Measure
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.PostalAddressUse">
            <summary>
            The postal address use code system key.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.EntityNameUse">
            <summary>
            The entity name use code system key.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.CodeSystemKeys.AdministrativeGender">
            <summary>
            The administrative gender code system key.
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ConceptClassKeys">
            <summary>
            Concept classification identifiers for built-in concept classes
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.ClassCode">
            <summary>
            Classification codes
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Diagnosis">
            <summary>
            Diagnosis codes
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Finding">
            <summary>
            Clinical findings
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Form">
            <summary>
            Form codes (shape, texture, etc.)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Material">
            <summary>
            Material classifications
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Mood">
            <summary>
            Mood classifications
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Other">
            <summary>
            Other classifications
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Problem">
            <summary>
            Problems or condition codes
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Relationship">
            <summary>
            Relationship class identifier
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Route">
            <summary>
            Routes of adminstration class identifier
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Status">
            <summary>
            Status codes 
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.Stock">
            <summary>
            Stock classification codes
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptClassKeys.UnitOfMeasure">
            <summary>
            Unit of measure classification
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ConceptRelationshipTypeKeys">
            <summary>
            Reference type identifiers
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptRelationshipTypeKeys.InverseOf">
            <summary>
            The source concept has the inverse meaning of the target concept
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptRelationshipTypeKeys.MemberOf">
            <summary>
            The source concept is a member of the target concept
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptRelationshipTypeKeys.NegationOf">
            <summary>
            The source concept is a negation of the target concept
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptRelationshipTypeKeys.SameAs">
            <summary>
            The source concept has the same meaning as the target concept
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ConceptSetKeys">
            <summary>
            Represents identifiers for the built-in concept sets for OpenIZ
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.ActClass">
            <summary>
            Represents codes which are used to classify acts
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.ActInterpretation">
            <summary>
            Represents codes which are used to represent clinical interpretations 
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.ActMood">
            <summary>
            Represents codes which are used to dictate the mood (mode) of an act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.ActRelationshipType">
            <summary>
            Represents codes which are used to relate two acts together
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.ActStatus">
            <summary>
            Represents codes which are used to dictate the status of an act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.AddressComponentType">
            <summary>
            Represents codes which are used qualify the components of an address
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.AddressUse">
            <summary>
            Represents codes which are used to dictate the intentded use of an address
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.AdministrativeGenderCode">
            <summary>
            Represents codes which are used to classify the gender of an entity
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.ConceptStatus">
            <summary>
            Represents codes which are used to classify the current state of a concept
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.ContainerCap">
            <summary>
            Represents the container cap concept set.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.ContainerSeparatorTypeKeys">
            <summary>
            Represents the container separator concept set.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.EntityClass">
            <summary>
            Represents concepts which are used to classify entities
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.EntityRelationshipType">
            <summary>
            Represents concepts which are used to classify the manner in which entities are related to ne another.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.EntityStatus">
            <summary>
            Represents concepts which are used to classify the current status of an entity
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.FamilyMember">
            <summary>
            Represents concepts which are entity relationships used by family members of entities
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.IndustryCode">
            <summary>
            Represents concepts which dictate a partcular industry in which an oganization operates
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.NameUse">
            <summary>
            Represents concepts which classify the intended use of a name
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.ServiceCode">
            <summary>
            Represents concepts which define services provided by organizations
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.TelecomAddressType">
            <summary>
            Represents concepts which identify the type of telecommunications equipment used
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.TelecomAddressUse">
            <summary>
            Represents concept which classify the intended use of a telecommunications address
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.VaccineTypeCodes">
            <summary>
            Represents concepts which classify vaccination types
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.VitalSigns">
            <summary>
            Represents concepts which distinguish observations as vital signs measurements
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.ProblemObservations">
            <summary>
            Reprsents concept which distinguish observations of problems or conditions
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.AdverseEventActs">
            <summary>
            Acts which represent adverse events such as diagnosis of intolerances, etc.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.AllergyIntoleranceTypes">
            <summary>
            Allergy and intolerance types
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.PlaceTypes">
            <summary>
            Orgnaiztaion types
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ConceptSetKeys.OrganizationTypes">
            <summary>
            Orgnaiztaion types
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ContainerCapKeys">
            <summary>
            Represents a collection of container cap keys.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ContainerCapKeys.ChildProof">
            <summary>
            Represents a child proof cap.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ContainerCapKeys.EasyOpen">
            <summary>
            Represents an easy open cap.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ContainerCapKeys.Film">
            <summary>
            Represents a film cap.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ContainerCapKeys.Foil">
            <summary>
            Represents a foil cap.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ContainerCapKeys.MedicationCap">
            <summary>
            Represents a medication cap.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ContainerCapKeys.PushCap">
            <summary>
            Represents a push cap.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ContainerCapKeys.ScrewCap">
            <summary>
            Represents a screw cap.
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ContainerSeparatorTypeKeys">
            <summary>
            Represents a collection of container separator type keys.
            A material in a blood collection container that facilitates the separation of of blood cells from serum or plasma
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ContainerSeparatorTypeKeys.Gel">
            <summary>
            Represents a gelatinous type of separator material.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ContainerSeparatorTypeKeys.None">
            <summary>
            Represents no separator material is present in the container.
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ContainerTypeKeys">
            <summary>
            Represents a collection of container type keys.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ContainerTypeKeys.Boxes">
            <summary>
            Represents a container type of box.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ContainerTypeKeys.Vials">
            <summary>
            Represents a container type of vial.
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.DeterminerKeys">
            <summary>
            Determiner codes classify an entity into one of three categories. 
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.DeterminerKeys.Described">
            <summary>
            Indicates the entity is not a particular instance of a thing, rather a type of thing
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.DeterminerKeys.DescribedQualified">
            <summary>
            Indicates the entity is a type of thing that has been qualified further
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.DeterminerKeys.Specific">
            <summary>
            Indicates the entity is a specific instance of a thing
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.EntityClassKeyStrings">
            <summary>
            Entity class concept keys
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.Animal">
            <summary>
            Animal
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.ChemicalSubstance">
            <summary>
            Chemical Substance
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.CityOrTown">
            <summary>
            City or town
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.Container">
            <summary>
            Container
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.Country">
            <summary>
            Country or nation
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.CountyOrParish">
            <summary>
            County or parish
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.Device">
            <summary>
            Device
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.Entity">
            <summary>
            Entity
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.Food">
            <summary>
            Food
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.LivingSubject">
            <summary>
            Living Subject
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.ManufacturedMaterial">
            <summary>
            Manufactured material
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.Material">
            <summary>
            Material
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.NonLivingSubject">
            <summary>
            Non living subject
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.Organization">
            <summary>
            Organization
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.Patient">
            <summary>
            Patient
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.Person">
            <summary>
            Person
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.Place">
            <summary>
            Place
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.Provider">
            <summary>
            Service delivery location
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.ServiceDeliveryLocation">
            <summary>
            Service delivery location
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeyStrings.State">
            <summary>
            State
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.EntityClassKeys">
            <summary>
            Entity class concept keys
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Animal">
            <summary>
            Animal
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.ChemicalSubstance">
            <summary>
            Chemical Substance
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.CityOrTown">
            <summary>
            City or town
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Container">
            <summary>
            Container
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Country">
            <summary>
            Country or nation
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.CountyOrParish">
            <summary>
            County or parish
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Device">
            <summary>
            Device
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Entity">
            <summary>
            Entity
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Food">
            <summary>
            Food
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.LivingSubject">
            <summary>
            Living Subject
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.ManufacturedMaterial">
            <summary>
            Manufactured material
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Material">
            <summary>
            Material
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.NonLivingSubject">
            <summary>
            Non living subject
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Organization">
            <summary>
            Organization
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Patient">
            <summary>
            Patient
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Person">
            <summary>
            Person
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Place">
            <summary>
            Place
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.Provider">
            <summary>
            Service delivery location
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.ServiceDeliveryLocation">
            <summary>
            Service delivery location
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityClassKeys.State">
            <summary>
            State
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys">
            <summary>
            Base entity relationship type keys
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Access">
            <summary>
            The access
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.ActiveMoiety">
            <summary>
            The active moiety
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.AdministerableMaterial">
            <summary>
            The administerable material
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.AdoptedChild">
            <summary>
            The adopted child
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.AdoptedDaughter">
            <summary>
            The adopted daughter
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.AdoptedSon">
            <summary>
            The adopted son
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Affiliate">
            <summary>
            The affiliate
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Agent">
            <summary>
            The agent
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Aliquot">
            <summary>
            The aliquot
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Assigned">
            <summary>
            The assigned
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.AssignedEntity">
            <summary>
            The assigned entity
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Aunt">
            <summary>
            The aunt
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Birthplace">
            <summary>
            The birthplace
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Brother">
            <summary>
            The brother
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Brotherinlaw">
            <summary>
            The brotherinlaw
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Caregiver">
            <summary>
            The caregiver
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.CaseSubject">
            <summary>
            The case subject
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Child">
            <summary>
            The child
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.ChildInlaw">
            <summary>
            The child inlaw
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Citizen">
            <summary>
            The citizen
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Claimant">
            <summary>
            The claimant
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.ClinicalResearchInvestigator">
            <summary>
            The clinical research investigator
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.ClinicalResearchSponsor">
            <summary>
            The clinical research sponsor
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.CommissioningParty">
            <summary>
            The commissioning party
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Contact">
            <summary>
            The contact
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Cousin">
            <summary>
            The cousin
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.CoverageSponsor">
            <summary>
            The coverage sponsor
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.CoveredParty">
            <summary>
            The covered party
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Daughter">
            <summary>
            The daughter
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.DaughterInlaw">
            <summary>
            The daughter inlaw
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.DedicatedServiceDeliveryLocation">
            <summary>
            The dedicated service delivery location
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Dependent">
            <summary>
            The dependent
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.DistributedMaterial">
            <summary>
            The distributed material
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.DomesticPartner">
            <summary>
            The domestic partner
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.EmergencyContact">
            <summary>
            The emergency contact
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Employee">
            <summary>
            The employee
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.ExposedEntity">
            <summary>
            The exposed entity
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.FamilyMember">
            <summary>
            The family member
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Father">
            <summary>
            The father
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Fatherinlaw">
            <summary>
            The fatherinlaw
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.FosterChild">
            <summary>
            The foster child
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.FosterDaughter">
            <summary>
            The foster daughter
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.FosterSon">
            <summary>
            The foster son
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Grandchild">
            <summary>
            The grandchild
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Granddaughter">
            <summary>
            The granddaughter
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Grandfather">
            <summary>
            The grandfather
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Grandmother">
            <summary>
            The grandmother
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Grandparent">
            <summary>
            The grandparent
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Grandson">
            <summary>
            The grandson
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.GreatGrandfather">
            <summary>
            The great grandfather
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.GreatGrandmother">
            <summary>
            The great grandmother
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.GreatGrandparent">
            <summary>
            The great grandparent
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Guarantor">
            <summary>
            The guarantor
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.GUARD">
            <summary>
            The guard
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Guardian">
            <summary>
            The guardian
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Halfbrother">
            <summary>
            The halfbrother
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Halfsibling">
            <summary>
            The halfsibling
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Halfsister">
            <summary>
            The halfsister
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.HealthcareProvider">
            <summary>
            The healthcare provider
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.HealthChart">
            <summary>
            The health chart
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.HeldEntity">
            <summary>
            The held entity
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Husband">
            <summary>
            The husband
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.IdentifiedEntity">
            <summary>
            The identified entity
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.IncidentalServiceDeliveryLocation">
            <summary>
            The incidental service delivery location
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Individual">
            <summary>
            The individual
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.InvestigationSubject">
            <summary>
            The investigation subject
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.InvoicePayor">
            <summary>
            The invoice payor
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Isolate">
            <summary>
            The isolate
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.LicensedEntity">
            <summary>
            The licensed entity
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.MaintainedEntity">
            <summary>
            The maintained entity
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.ManufacturedProduct">
            <summary>
            The manufactured product
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.MaternalAunt">
            <summary>
            The maternal aunt
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.MaternalCousin">
            <summary>
            The maternal cousin
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.MaternalGrandfather">
            <summary>
            The maternal grandfather
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.MaternalGrandmother">
            <summary>
            The maternal grandmother
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.MaternalGrandparent">
            <summary>
            The maternal grandparent
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.MaternalGreatgrandfather">
            <summary>
            The maternal greatgrandfather
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.MaternalGreatgrandmother">
            <summary>
            The maternal greatgrandmother
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.MaternalGreatgrandparent">
            <summary>
            The maternal greatgrandparent
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.MaternalUncle">
            <summary>
            The maternal uncle
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.MilitaryPerson">
            <summary>
            The military person
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Mother">
            <summary>
            The mother
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Motherinlaw">
            <summary>
            The motherinlaw
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.NamedInsured">
            <summary>
            The named insured
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.NaturalBrother">
            <summary>
            The natural brother
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.NaturalChild">
            <summary>
            The natural child
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.NaturalDaughter">
            <summary>
            The natural daughter
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.NaturalFather">
            <summary>
            The natural father
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.NaturalFatherOfFetus">
            <summary>
            The natural father of fetus
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.NaturalMother">
            <summary>
            The natural mother
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.NaturalParent">
            <summary>
            The natural parent
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.NaturalSibling">
            <summary>
            The natural sibling
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.NaturalSister">
            <summary>
            The natural sister
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.NaturalSon">
            <summary>
            The natural son
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Nephew">
            <summary>
            The nephew
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.NextOfKin">
            <summary>
            The next of kin
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Niece">
            <summary>
            The niece
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.NieceNephew">
            <summary>
            The niece nephew
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.NotaryPublic">
            <summary>
            The notary public
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.OwnedEntity">
            <summary>
            The owned entity
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Parent">
            <summary>
            The parent
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.ParentInlaw">
            <summary>
            The parent inlaw
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Part">
            <summary>
            The part
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.PaternalAunt">
            <summary>
            The paternal aunt
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.PaternalCousin">
            <summary>
            The paternal cousin
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.PaternalGrandfather">
            <summary>
            The paternal grandfather
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.PaternalGrandmother">
            <summary>
            The paternal grandmother
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.PaternalGrandparent">
            <summary>
            The paternal grandparent
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.PaternalGreatgrandfather">
            <summary>
            The paternal greatgrandfather
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.PaternalGreatgrandmother">
            <summary>
            The paternal greatgrandmother
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.PaternalGreatgrandparent">
            <summary>
            The paternal greatgrandparent
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.PaternalUncle">
            <summary>
            The paternal uncle
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Patient">
            <summary>
            The patient
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Payee">
            <summary>
            The payee
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.PersonalRelationship">
            <summary>
            The personal relationship
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.PlaceOfDeath">
            <summary>
            The place of death
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.PolicyHolder">
            <summary>
            The policy holder
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.ProgramEligible">
            <summary>
            The program eligible
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.QualifiedEntity">
            <summary>
            The qualified entity
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.RegulatedProduct">
            <summary>
            The regulated product
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.ResearchSubject">
            <summary>
            The research subject
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.RetailedMaterial">
            <summary>
            The retailed material
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Roomate">
            <summary>
            The roomate
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.ServiceDeliveryLocation">
            <summary>
            The service delivery location
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Sibling">
            <summary>
            The sibling
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.SiblingInlaw">
            <summary>
            The sibling inlaw
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.SignificantOther">
            <summary>
            The significant other
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.SigningAuthorityOrOfficer">
            <summary>
            The signing authority or officer
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Sister">
            <summary>
            The sister
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Sisterinlaw">
            <summary>
            The sisterinlaw
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Son">
            <summary>
            The son
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.SonInlaw">
            <summary>
            The son inlaw
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Specimen">
            <summary>
            The specimen
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Spouse">
            <summary>
            The spouse
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Stepbrother">
            <summary>
            The stepbrother
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.StepChild">
            <summary>
            The step child
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Stepdaughter">
            <summary>
            The stepdaughter
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Stepfather">
            <summary>
            The stepfather
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Stepmother">
            <summary>
            The stepmother
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.StepParent">
            <summary>
            The step parent
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.StepSibling">
            <summary>
            The step sibling
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Stepsister">
            <summary>
            The stepsister
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Stepson">
            <summary>
            The stepson
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Student">
            <summary>
            The student
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Subscriber">
            <summary>
            The subscriber
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.TerritoryOfAuthority">
            <summary>
            The territory of authority
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.TherapeuticAgent">
            <summary>
            The therapeutic agent
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Uncle">
            <summary>
            The uncle
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Underwriter">
            <summary>
            The underwriter
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.UsedEntity">
            <summary>
            The used entity
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.WarrantedProduct">
            <summary>
            The warranted product
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Wife">
            <summary>
            The wife
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Replaces">
            <summary>
            The replaces
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.Instance">
            <summary>
            The target entity represents an instance of the scoper entity
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.EntityRelationshipTypeKeys.LocatedEntity">
            <summary>
            Relates the target entity to a source location
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.ExtensionTypeKeys">
            <summary>
            Represents extension type keys for ONLY CORE EXTENSIONS. Third party extensions should never be placed in core
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.ExtensionTypeKeys.JpegPhotoExtension">
            <summary>
            An extension which can hold a JPG photo of an entity
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.NameComponentKeys">
            <summary>
            Name component type keys
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameComponentKeys.Delimiter">
            <summary>
            The name component represents a delimeter in a name such as hyphen or space
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameComponentKeys.Family">
            <summary>
            The name component represents the surname
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameComponentKeys.Given">
            <summary>
            The name component represents the given name
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameComponentKeys.Prefix">
            <summary>
            The name component represents the prefix such as Von or Van
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameComponentKeys.Suffix">
            <summary>
            The name component represents a suffix such as III or Esq.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameComponentKeys.Title">
            <summary>
            The name component represents a formal title like Mr, Dr, Capt.
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.NameUseKeys">
            <summary>
            Name use keys
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameUseKeys.Alphabetic">
            <summary>
            The name used is an alphabetic representation of the name (ex: romaji in Japanese)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameUseKeys.Anonymous">
            <summary>
            The name is an anonymous name for the object (not the real name but a name used for care delivery)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameUseKeys.Artist">
            <summary>
            The name represents an artist name or stage name
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameUseKeys.Assigned">
            <summary>
            The name represents an assigned name (given or bestowed by an authority)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameUseKeys.Ideographic">
            <summary>
            THe name represents an ideographic representation of the name
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameUseKeys.Indigenous">
            <summary>
            The name is an indigenous name or tribal name for the patient
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameUseKeys.Legal">
            <summary>
            The name represents the current legal name of an object (such as a corporate name)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameUseKeys.License">
            <summary>
            The name represents a name as displayed on a license or known to a license authority
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameUseKeys.MaidenName">
            <summary>
            THe name is a maiden name (name of a patient before marriage)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameUseKeys.OfficialRecord">
            <summary>
            The name as it appears on an official record
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameUseKeys.Phonetic">
            <summary>
            The name represents a phonetic representation of a name such as a SOUNDEX code
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameUseKeys.Pseudonym">
            <summary>
            The name is a pseudonym for the object or an synonym name
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameUseKeys.Religious">
            <summary>
            The name is to be used for religious purposes (such as baptismal name)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameUseKeys.Search">
            <summary>
            The name is to be used in the performing of matches only
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameUseKeys.Soundex">
            <summary>
            The name represents the computed soundex code of a name
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NameUseKeys.Syllabic">
            <summary>
            The name represents a syllabic name.
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.NullReasonKeys">
            <summary>
            In OpenIZ, any concept can be replaced with a null reason. A null reason indicates why a particular field is not present rather than being null
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NullReasonKeys.Unavailable">
            <summary>
            The reason that the requested value was not provided is that it is not available
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NullReasonKeys.NotApplicable">
            <summary>
            The reason that the requested value was not provided is that it is not applicable (for example last menstrual period of a male)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NullReasonKeys.Derived">
            <summary>
            The reason that the value is not provided is that it can be derived from other information
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NullReasonKeys.Other">
            <summary>
            The value was not provided because it does not fall within the acceptable values 
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NullReasonKeys.AskedUnknown">
            <summary>
            The value was asked for but the target did not know that answer
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NullReasonKeys.Invalid">
            <summary>
            The value was entered but it is invalid according to business rules
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NullReasonKeys.Trace">
            <summary>
            There is a value present, but the quantity of the value is so small that it cannot be registered
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NullReasonKeys.NegativeInfinity">
            <summary>
            The value is not prvovided because it is negative infinity
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NullReasonKeys.SufficientQuantity">
            <summary>
            The exact value is not known, but there is sufficient quantity to perform an act
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NullReasonKeys.UnEncoded">
            <summary>
            The value is available however it cannot be encoded in the desired format
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NullReasonKeys.NotAsked">
            <summary>
            The value is unavailable because it was not asked for
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NullReasonKeys.Unknown">
            <summary>
            The value may have been asked for and was not known or is unknown (this differes from AskedUnknown)
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NullReasonKeys.PositiveInfinity">
            <summary>
            The value is not provided because it is positive infinity
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NullReasonKeys.NoInformation">
            <summary>
            The value is not provided because there is no available information
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.NullReasonKeys.Masked">
            <summary>
            The value is available however it has been masked due to privacy concerns
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.PhoneticAlgorithmKeys">
            <summary>
            Phonetic algorithm keys for built in phonetic algorithms in OpenIZ
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.PhoneticAlgorithmKeys.Metaphone">
            <summary>
            Represents the metaphone phonetic algorithm
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.PhoneticAlgorithmKeys.None">
            <summary>
            Represents the null phonetic algorithm
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.PhoneticAlgorithmKeys.Soundex">
            <summary>
            Represents the soundex algorithm
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.StatusKeys">
            <summary>
            Status concepts represent the current status of entities, acts, and concepts.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.StatusKeys.Active">
            <summary>
            When an entity or act is active, it means the information or entity is currently correct and ongoing
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.StatusKeys.Completed">
            <summary>
            Indicates that an act has been completed and now represents an act in the past
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.StatusKeys.New">
            <summary>
            Indicates that the data is new, and may require additional verification or actions
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.StatusKeys.Nullified">
            <summary>
            Indicates that the entity or act never existed, and was entered in error
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.StatusKeys.Cancelled">
            <summary>
            Indicates that the act was cancelled before being completed
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.StatusKeys.Obsolete">
            <summary>
            Indicates that the entity or act did exist at one point, however it no longer exists
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.TelecomAddressUseKeys">
            <summary>
            Telecommunications address use keys
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.TelecomAddressUseKeys.AnsweringService">
            <summary>
            answering service
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.TelecomAddressUseKeys.EmergencyContact">
            <summary>
            Emergency contact
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.TelecomAddressUseKeys.MobileContact">
            <summary>
            Mobile phone contact
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.TelecomAddressUseKeys.Pager">
            <summary>
            pager
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.TelecomAddressUseKeys.Public">
            <summary>
            public (800 number example) contact
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.TelecomAddressUseKeys.TemporaryAddress">
            <summary>
            temporary contact
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.TelecomAddressUseKeys.WorkPlace">
            <summary>
            For use in the workplace
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Constants.UserClassKeys">
            <summary>
            Represents user classification keys
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.UserClassKeys.ApplicationUser">
            <summary>
            Represents a user which is an application
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.UserClassKeys.HumanUser">
            <summary>
            Represents a user which is a human
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Constants.UserClassKeys.SystemUser">
            <summary>
            Represents a user which is a system user
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.AssigningAuthority">
            <summary>
            Represents a model class which is an assigning authority
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.AssigningAuthority.#ctor">
            <summary>
            Assigning authority
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.AssigningAuthority.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new assigning authority 
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.AssigningAuthority.Name">
            <summary>
            Gets or sets the name of the assigning authority
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.AssigningAuthority.DomainName">
            <summary>
            Gets or sets the domain name of the assigning authority
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.AssigningAuthority.Description">
            <summary>
            Gets or sets the description of the assigning authority
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.AssigningAuthority.Oid">
            <summary>
            Gets or sets the oid of the assigning authority
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.AssigningAuthority.Url">
            <summary>
            The URL of the assigning authority
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.AssigningAuthority.AuthorityScopeXml">
            <summary>
            Represents scopes to which the authority is bound
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.AssigningAuthority.AssigningDeviceKey">
            <summary>
            Assigning device identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.AssigningAuthority.ValidationRegex">
            <summary>
            Gets or sets the validation regex
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.AssigningAuthority.IsUnique">
            <summary>
            True if the assigning authority values should be unique
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.AssigningAuthority.ShouldSerializeIsUnique">
            <summary>
            Should serialize IsUnique
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.AssigningAuthority.AssigningDevice">
            <summary>
            Gets or sets the assigning device
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.AssigningAuthority.AuthorityScope">
            <summary>
            Gets concept sets to which this concept is a member
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.AssigningAuthority.ToMinimal">
            <summary>
            Represent the AA as a minimal info
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.AssigningAuthority.Refresh">
            <summary>
            Force reloading of delay load properties
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.AssigningAuthority.SemanticEquals(System.Object)">
            <summary>
            Gets the equals of this object
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.CodeSystem">
            <summary>
            Represents a code system which is a collection of reference terms
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.CodeSystem.#ctor">
            <summary>
            Creates a new code system
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.CodeSystem.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates a new code system object
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.CodeSystem.Name">
            <summary>
            Gets or sets the name of the code system
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.CodeSystem.Oid">
            <summary>
            Gets or sets the Oid of the code system
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.CodeSystem.Authority">
            <summary>
            Gets or sets the authority of the code system
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.CodeSystem.ObsoletionReason">
            <summary>
            Gets or sets the obsoletion reason of the code system
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.CodeSystem.Url">
            <summary>
            Gets or sets the URL of the code system
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.CodeSystem.VersionText">
            <summary>
            Gets or sets the version text of the code system
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.CodeSystem.Description">
            <summary>
            Gets or sets the human description
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.CodeSystem.SemanticEquals(System.Object)">
            <summary>
            Determine equality of 
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.Concept">
            <summary>
            A class representing a generic concept used in the OpenIZ datamodel
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.Concept.#ctor">
            <summary>
            Creates a new concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.IsSystemConcept">
            <summary>
            Gets or sets an indicator which dictates whether the concept is a system concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.Mnemonic">
            <summary>
            Gets or sets the unchanging mnemonic for the concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.StatusConceptKey">
            <summary>
            Gets or sets the status concept key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.StatusConcept">
            <summary>
            Gets or sets the status of the concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.Relationship">
            <summary>
            Gets a list of concept relationships
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.Concept.IsEmpty">
            <summary>
            True if concept is empty
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.ClassKey">
            <summary>
            Gets or sets the class identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.Class">
            <summary>
            Gets or sets the classification of the concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.ReferenceTerms">
            <summary>
            Gets a list of concept reference terms
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.ConceptNames">
            <summary>
            Gets the concept names
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.ConceptSetsXml">
            <summary>
            Concept sets as identifiers for XML purposes only
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Concept.ConceptSets">
            <summary>
            Gets concept sets to which this concept is a member
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.Concept.ToString">
            <summary>
            Override string
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.Concept.SemanticEquals(System.Object)">
            <summary>
            Determine equality
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.Concept.ToDisplay">
            <summary>
            Represent as a display string
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ConceptClass">
            <summary>
            Identifies a classification for a concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptClass.Name">
            <summary>
            Gets or sets the name of the concept class
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptClass.Mnemonic">
            <summary>
            Gets or sets the mnemonic
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ConceptName">
            <summary>
            Represents a name (human name) that a concept may have
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ConceptName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenIZ.Core.Model.DataTypes.ConceptName"/> class.
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ConceptName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenIZ.Core.Model.DataTypes.ConceptName"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ConceptName.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenIZ.Core.Model.DataTypes.ConceptName"/> class.
            </summary>
            <param name="language">The language.</param>
            <param name="name">The name.</param>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptName.Language">
            <summary>
            Gets or sets the language code of the object
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptName.Name">
            <summary>
            Gets or sets the name of the reference term
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptName.PhoneticCode">
            <summary>
            Gets or sets the phonetic code of the reference term
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptName.PhoneticAlgorithmKey">
            <summary>
            Gets or sets the identifier of the phonetic code
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptName.PhoneticAlgorithm">
            <summary>
            Gets or sets the phonetic algorithm
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ConceptName.Refresh">
            <summary>
            Refresh the object's delay load properties
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ConceptName.ShouldSerializePhoneticAlgorithmKey">
            <summary>
            Should serialize 
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm">
            <summary>
            Represents a reference term relationship between a concept and reference term
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm"/> class.
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm.#ctor(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm"/> class.
            </summary>
            <param name="referenceTermKey">The reference term identifier.</param>
            <param name="relationshipTypeKey">The relationship type identifier.</param>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm.ReferenceTermKey">
            <summary>
            Gets or sets the reference term identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm.ReferenceTerm">
            <summary>
            Gets or set the reference term
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm.RelationshipTypeKey">
            <summary>
            Gets or sets the relationship type identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm.RelationshipType">
            <summary>
            Gets or sets the relationship type
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ConceptReferenceTerm.Refresh">
            <summary>
            Refresh the specified object
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ConceptRelationship">
            <summary>
            Represents a relationship between two concepts
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptRelationship.TargetConceptKey">
            <summary>
            Gets or sets the target concept identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptRelationship.TargetConcept">
            <summary>
            Gets or sets the target concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptRelationship.RelationshipTypeKey">
            <summary>
            Relationship type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptRelationship.RelationshipType">
            <summary>
            Gets or sets the relationship type
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ConceptRelationship.Refresh">
            <summary>
            Force reloading of delay load properties
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ConceptRelationshipType">
            <summary>
            Concept relationship type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptRelationshipType.Name">
            <summary>
            Gets or sets the name of the relationship
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptRelationshipType.Mnemonic">
            <summary>
            The invariant of the relationship type
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ConceptSet">
            <summary>
            Represents set of concepts
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ConceptSet.#ctor">
            <summary>
            Concept set
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptSet.Name">
            <summary>
            Gets or sets the name of the concept set
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptSet.Mnemonic">
            <summary>
            Gets or sets the mnemonic for the concept set (used for convenient lookup)
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptSet.Oid">
            <summary>
            Gets or sets the oid of the concept set
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptSet.Url">
            <summary>
            Gets or sets the url of the concept set
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptSet.ConceptsXml">
            <summary>
            Concepts as identifiers for XML purposes only
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptSet.Concepts">
            <summary>
            Gets the concepts in the set
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ConceptSet.ObsoletionReason">
            <summary>
            Gets or sets the obsoletion reason
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.DatePrecision">
            <summary>
            Represents a date precision object
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.DataTypes.DatePrecision.Full">
            <summary>
            Represents full date precision.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.DataTypes.DatePrecision.Year">
            <summary>
            Represents year date precision.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.DataTypes.DatePrecision.Month">
            <summary>
            Represents month date precision.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.DataTypes.DatePrecision.Day">
            <summary>
            Represents day date precision.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.DataTypes.DatePrecision.Hour">
            <summary>
            Represents hour date precision.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.DataTypes.DatePrecision.Minute">
            <summary>
            Represents minute date precision.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.DataTypes.DatePrecision.Second">
            <summary>
            Represents second date precision.
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.Extension`1">
            <summary>
            Represents a base entity extension
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Extension`1.ExtensionValueXml">
            <summary>
            Gets or sets the value of the extension
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Extension`1.ExtensionValueString">
            <summary>
            Value as string of bytes
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Extension`1.ExtensionValue">
            <summary>
            Gets or sets the ignore value
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.Extension`1.GetValue">
            <summary>
            Get the value of the extension
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Extension`1.ExtensionDisplay">
            <summary>
            Gets or sets an extension displayable value
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Extension`1.ExtensionTypeKey">
            <summary>
            Gets or sets the extension type key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Extension`1.ExtensionType">
            <summary>
            Gets or sets the extension type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Extension`1.OpenIZ#Core#Model#Interfaces#IModelExtension#ExtensionTypeKey">
            <summary>
            Get the type key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Extension`1.OpenIZ#Core#Model#Interfaces#IModelExtension#Data">
            <summary>
            Gets the data
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Extension`1.OpenIZ#Core#Model#Interfaces#IModelExtension#Display">
            <summary>
            Get the display
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Extension`1.OpenIZ#Core#Model#Interfaces#IModelExtension#Value">
            <summary>
            Get the value of the extension
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.Extension`1.Refresh">
            <summary>
            Forces refresh 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.Extension`1.SemanticEquals(System.Object)">
            <summary>
            Determine equality
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.EntityExtension">
            <summary>
            Extension bound to entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityExtension.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityExtension.#ctor(System.Guid,System.Byte[])">
            <summary>
            Creates an entity extension
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityExtension.#ctor(System.Guid,System.Type,System.Object)">
            <summary>
            Creates an entity extension
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ActExtension">
            <summary>
            Act extension
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ActExtension.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ActExtension.#ctor(System.Guid,System.Byte[])">
            <summary>
            Creates an entity extension
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ActExtension.#ctor(System.Guid,System.Type,System.Object)">
            <summary>
            Creates an entity extension
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ExtensionType">
            <summary>
            Instructions on how an extensionshould be handled
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ExtensionType.#ctor">
            <summary>
            Extension type ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ExtensionType.#ctor(System.String,System.Type)">
            <summary>
            Creates  a new extension type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ExtensionType.ExtensionHandler">
            <summary>
            Gets or sets the extension handler
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ExtensionType.ExtensionHandlerInstance">
            <summary>
            Extension handler instance
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ExtensionType.ExtensionHandlerXml">
            <summary>
            Gets or sets the description
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ExtensionType.Name">
            <summary>
            Gets or sets the description
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ExtensionType.IsEnabled">
            <summary>
            Whether the extension is enabled
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.EntityIdentifier">
            <summary>
            Entity identifiers
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityIdentifier.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityIdentifier.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new entity identifier with specified authority
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityIdentifier.#ctor(OpenIZ.Core.Model.DataTypes.AssigningAuthority,System.String)">
            <summary>
            Creates a new entity identifier
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityIdentifier.#ctor(System.String,System.String)">
            <summary>
            Creates a new entity identifier with specified nsid
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ActIdentifier">
            <summary>
            Act identifier
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ActIdentifier.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ActIdentifier.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new entity identifier with specified authority
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ActIdentifier.#ctor(OpenIZ.Core.Model.DataTypes.AssigningAuthority,System.String)">
            <summary>
            Creates a new entity identifier
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.IdentifierBase`1">
            <summary>
            Represents an external assigned identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.IdentifierBase`1.Value">
            <summary>
            Gets or sets the value of the identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.IdentifierBase`1.AuthorityKey">
            <summary>
            Gets or sets the assinging authority id
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.IdentifierBase`1.IdentifierTypeKey">
            <summary>
            Gets or sets the type identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.IdentifierBase`1.IdentifierType">
            <summary>
            Gets or sets the identifier type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.IdentifierBase`1.AuthorityXml">
            <summary>
            Gets or sets a minimal assigning authority from XML data
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.IdentifierBase`1.Authority">
            <summary>
            Represents the authority information 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.IdentifierBase`1.Refresh">
            <summary>
            Force reloading of delay load properties
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.IdentifierBase`1.IsEmpty">
            <summary>
            True if the identifier is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.IdentifierBase`1.SemanticEquals(System.Object)">
            <summary>
            Returns true if the objects are equal
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.IdentifierType">
            <summary>
            Represents a basic information class which classifies the use of an identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.IdentifierType.ScopeConceptKey">
            <summary>
            Gets or sets the id of the scope concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.IdentifierType.TypeConceptKey">
            <summary>
            Gets or sets the concept which identifies the type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.IdentifierType.TypeConcept">
            <summary>
            Type concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.IdentifierType.ScopeConcept">
            <summary>
            Gets the scope of the identifier
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.IdentifierType.Refresh">
            <summary>
            Force reloading of delay load properties
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.Note`1">
            <summary>
            Generic note class
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.Note`1.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.Note`1.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new instance of the entity note
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Note`1.Text">
            <summary>
            Gets or sets the note text
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Note`1.AuthorKey">
            <summary>
            Gets or sets the author key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Note`1.Author">
            <summary>
            Gets or sets the author entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.Note`1.Refresh">
            <summary>
            Forces a refresh of the object
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.Note`1.SemanticEquals(System.Object)">
            <summary>
            Determine equality
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.EntityNote">
            <summary>
            Represents a note attached to an entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityNote.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityNote.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new instance of the entity note
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ActNote">
            <summary>
            Represents a note attached to an entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ActNote.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ActNote.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new instance of the entity note
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm">
            <summary>
            Represents a phonetic algorithm record in the model
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm.EmptyAlgorithm">
            <summary>
            Gets the phonetic algorithm which is the "empty" algorithm
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm.Name">
            <summary>
            Gets the name of the phonetic algorithm
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.PhoneticAlgorithm.Handler">
            <summary>
            Gets the handler (or generator) for the phonetic algorithm
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ReferenceTerm">
            <summary>
            Represents a basic reference term
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTerm.Mnemonic">
            <summary>
            Gets or sets the mnemonic for the reference term
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTerm.CodeSystem">
            <summary>
            Gets or sets the code system 
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTerm.CodeSystemKey">
            <summary>
            Gets or sets the code system identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTerm.DisplayNames">
            <summary>
            Gets display names associated with the reference term
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ReferenceTerm.Refresh">
            <summary>
            Force reloading of delay load properties
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ReferenceTermName">
            <summary>
            Display name of a code system or reference term
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ReferenceTermName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenIZ.Core.Model.DataTypes.ReferenceTermName"/> class.
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ReferenceTermName.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenIZ.Core.Model.DataTypes.ReferenceTermName"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ReferenceTermName.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenIZ.Core.Model.DataTypes.ReferenceTermName"/> class.
            </summary>
            <param name="language">The language.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ReferenceTermName.ShouldSerializeSourceEntityKey">
            <summary>
            Should serialize reference term key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTermName.Language">
            <summary>
            Gets or sets the language code of the object
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTermName.Name">
            <summary>
            Gets or sets the name of the reference term
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTermName.PhoneticCode">
            <summary>
            Gets or sets the phonetic code of the reference term
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTermName.PhoneticAlgorithmKey">
            <summary>
            Gets or sets the identifier of the phonetic code
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTermName.PhoneticAlgorithm">
            <summary>
            Gets or sets the phonetic algorithm
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.ReferenceTermName.SourceEntityKey">
            <summary>
            Gets the source entity key
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ReferenceTermName.Refresh">
            <summary>
            Force reloading of delay load properties
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.Tag`1">
            <summary>
            Represents the base class for tags
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Tag`1.TagKey">
            <summary>
            Gets or sets the key of the tag
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Tag`1.Value">
            <summary>
            Gets or sets the value of the tag
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Tag`1.SourceEntityKey">
            <summary>
            Gets or sets the source entity's key (where the relationship is FROM)
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.Tag`1.SourceEntity">
            <summary>
            The entity that this relationship targets
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.Tag`1.SemanticEquals(System.Object)">
            <summary>
            Semantic equality 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.Tag`1.ToString">
            <summary>
            Represent tag as key/value
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.EntityTag">
            <summary>
            Represents a tag associated with an entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityTag.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.EntityTag.#ctor(System.String,System.String)">
            <summary>
            Construtor setting key and tag
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.ActTag">
            <summary>
            Represents a tag on an act
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ActTag.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.DataTypes.ActTag.#ctor(System.String,System.String)">
            <summary>
            Construtor setting key and tag
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.DataTypes.TemplateDefinition">
            <summary>
            Represents a template definition
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.TemplateDefinition.Mnemonic">
            <summary>
            Gets or sets the mnemonic
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.TemplateDefinition.Name">
            <summary>
            Gets or set the name 
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.TemplateDefinition.Oid">
            <summary>
            Gets or sets the oid of the concept set
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.DataTypes.TemplateDefinition.Description">
            <summary>
            Gets or sets the description
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.Container">
            <summary>
            Represents a container.
            </summary>
            <seealso cref="T:OpenIZ.Core.Model.Entities.ManufacturedMaterial" />
        </member>
        <member name="F:OpenIZ.Core.Model.Entities.Container.capTypeConcept">
            <summary>
            The cap type concept.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Entities.Container.capTypeConceptKey">
            <summary>
            The cap type concept key.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Entities.Container.separatorTypeConcept">
            <summary>
            The separator type concept.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Entities.Container.separatorTypeConceptKey">
            <summary>
            The separator type concept key.
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Container.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OpenIZ.Core.Model.Entities.Container"/> class.
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Container.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenIZ.Core.Model.Entities.Container"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Container.BarrierDeltaQuantity">
            <summary>
            Gets or sets the barrier delta quantity. The distance from the Point of Reference to the separator material (barrier) within a container.
            </summary>
            <value>The barrier delta quantity.</value>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Container.BottomDeltaQuantity">
            <summary>
            Gets or sets the bottom delta quantity. The distance from the Point of Reference to the outside bottom of the container.
            </summary>
            <value>The bottom delta quantity.</value>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Container.CapacityQuantity">
            <summary>
            Gets or sets the capacity quantity. The functional capacity of the container.
            </summary>
            <value>The capacity quantity.</value>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Container.CapTypeConcept">
            <summary>
            Gets or sets the cap type concept. The type of container cap consistent with de-capping, piercing or other automated manipulation.
            </summary>
            <value>The cap type concept.</value>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Container.CapTypeConceptKey">
            <summary>
            Gets or sets the cap type concept key.
            </summary>
            <value>The cap type concept key.</value>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Container.DiameterQuantity">
            <summary>
            Gets or sets the diameter quantity. The outside diameter of the container.
            </summary>
            <value>The diameter quantity.</value>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Container.HeightQuantity">
            <summary>
            Gets or sets the height quantity. The height of the container.
            </summary>
            <value>The height quantity.</value>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Container.SeparatorTypeConcept">
            <summary>
            Gets or sets the separator type concept. A material added to a container to facilitate and create a physical separation of specimen components of differing density.
            Examples: A gel material added to blood collection tubes that following centrifugation creates a physical barrier between the blood cells and the serum or plasma.
            </summary>
            <value>The separator type concept.</value>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Container.SeparatorTypeConceptKey">
            <summary>
            Gets or sets the separator type concept key.
            </summary>
            <value>The separator type concept key.</value>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Container.SemanticEquals(System.Object)">
            <summary>
            Determines if two containers are semantically equal.
            </summary>
            <param name="obj">The container to compare against.</param>
            <returns>Returns true if the two containers are equal, otherwise false.</returns>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.UserEntity">
            <summary>
            Represents a user entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.UserEntity.SecurityUser">
            <summary>
            Gets or sets the security user key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.UserEntity.SecurityUserKey">
            <summary>
            Gets or sets the security user key
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.UserEntity.SemanticEquals(System.Object)">
            <summary>
            Determine semantic equality
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.ApplicationEntity">
            <summary>
            An associative entity which links a SecurityApplication to an Entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.ApplicationEntity.#ctor">
            <summary>
            Creates application entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.ApplicationEntity.SecurityApplication">
            <summary>
            Gets or sets the security application
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.ApplicationEntity.SecurityApplicationKey">
            <summary>
            Gets or sets the security application
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.ApplicationEntity.SoftwareName">
            <summary>
            Gets or sets the name of the software
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.ApplicationEntity.VendorName">
            <summary>
            Gets or sets the vendoer name of the software
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.ApplicationEntity.VersionName">
            <summary>
            Gets or sets the version of the software
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.ApplicationEntity.Refresh">
            <summary>
            Force delay loading
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.ApplicationEntity.SemanticEquals(System.Object)">
            <summary>
            Semantic equality function
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.DeviceEntity">
            <summary>
            Represents a device entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.DeviceEntity.#ctor">
            <summary>
            Device entity ctor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.DeviceEntity.ManufacturerModelName">
            <summary>
            Gets or sets the manufacturer model name
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.DeviceEntity.OperatingSystemName">
            <summary>
            Gets or sets the operating system name
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.DeviceEntity.SecurityDevice">
            <summary>
            Gets or sets the security device
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.DeviceEntity.SecurityDeviceKey">
            <summary>
            Gets or sets the security device key
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.DeviceEntity.Refresh">
            <summary>
            Force refresh of data model
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.DeviceEntity.SemanticEquals(System.Object)">
            <summary>
            Determine semantic equality
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.Entity">
            <summary>
            Represents the base of all entities
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Entity.#ctor">
            <summary>
            Creates a new instance of the entity class
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.Addresses">
            <summary>
            Gets a list of all addresses associated with the entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.ClassConcept">
            <summary>
            Class concept datal load property
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.ClassConceptKey">
            <summary>
            Class concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.CreationAct">
            <summary>
            Creation act reference
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.CreationActKey">
            <summary>
            Creation act reference
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.DeterminerConcept">
            <summary>
            Determiner concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.DeterminerConceptKey">
            <summary>
            Determiner concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.Extensions">
            <summary>
            Gets a list of all extensions associated with the entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.Identifiers">
            <summary>
            Gets the identifiers associated with this entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.Names">
            <summary>
            Gets a list of all names associated with the entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.Notes">
            <summary>
            Gets a list of all notes associated with the entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.Participations">
            <summary>
            Gets the acts in which this entity participates
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.Relationships">
            <summary>
            Gets a list of all associated entities for this entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.StatusConcept">
            <summary>
            Status concept id
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.StatusConceptKey">
            <summary>
            Status concept id
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.Tags">
            <summary>
            Gets a list of all tags associated with the entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.Telecoms">
            <summary>
            Gets a list of all telecommunications addresses associated with the entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.TemplateKey">
            <summary>
            Gets the template key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.Template">
            <summary>
            Gets or sets the template definition
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.TypeConcept">
            <summary>
            Type concept identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Entity.TypeConceptKey">
            <summary>
            Type concept identifier
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Entity.Clean">
            <summary>
            Clean the patient of any empty "noise" elements
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Entity.SemanticEquals(System.Object)">
            <summary>
            Semantic equality function
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Entity.ShouldSerializeCreationActKey">
            <summary>
            Should serialize creation act
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Entity.ShouldSerializeTypeConceptKey">
            <summary>
            Should serialize type concept
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Entity.ShouldSerializeIdentifiers">
            <summary>
            Should serialize identifiers
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Entity.ShouldSerializeNames">
            <summary>
            Should serialize Names
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Entity.ShouldSerializeAddresses">
            <summary>
            Should serialize addresses
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Entity.ShouldSerializeParticipations">
            <summary>
            Should serialize participations
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Entity.ShouldSerializeTags">
            <summary>
            Should serialize tags
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Entity.ShouldSerializeExtensions">
            <summary>
            Shoudl serialize extensions
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Entity.ShouldSerializeNotes">
            <summary>
            Should serialize notes
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Entity.ShouldSerializeTelecoms">
            <summary>
            Should serialize telecoms
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Entity.Copy">
            <summary>
            Copies the entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Entity.ShouldSerializeTemplateKey">
            <summary>
            Should serialize template key
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.EntityAddress">
            <summary>
            Entity address
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityAddress.#ctor(System.Guid,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create the address from components
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityAddress.#ctor(System.Guid,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Create the address from components
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityAddress.#ctor">
            <summary>
            Default CTOR
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityAddress.AddressUse">
            <summary>
            Gets or sets the address use
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityAddress.AddressUseKey">
            <summary>
            Gets or sets the address use key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityAddress.Component">
            <summary>
            Gets or sets the component types
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityAddress.GetComponent(System.Guid)">
            <summary>
            Get components
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityAddress.Clean">
            <summary>
            Remove empty components
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityAddress.IsEmpty">
            <summary>
            True if empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityAddress.SemanticEquals(System.Object)">
            <summary>
            Semantic equality function
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityAddress.ShouldSerializeSourceEntityKey">
            <summary>
            Never need to serialize the entity source key
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityAddress.ToDisplay">
            <summary>
            Represent as display
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.EntityAddressComponent">
            <summary>
            A single address component
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityAddressComponent.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new address component type.
            </summary>
            <param name="componentType"></param>
            <param name="value"></param>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityAddressComponent.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityAddressComponent.ComponentTypeKey">
            <summary>
            Gets or sets the component type key
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.EntityName">
            <summary>
            Represents a name for an entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityName.#ctor(System.Guid,System.String,System.String[])">
            <summary>
            Creates a new name
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityName.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new simple name
            </summary>
            <param name="nameUse"></param>
            <param name="name"></param>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityName.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityName.NameUse">
            <summary>
            Gets or sets the name use
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityName.NameUseKey">
            <summary>
            Gets or sets the name use key
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityName.Clean">
            <summary>
            Clean object
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityName.IsEmpty">
            <summary>
            True if empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityName.Refresh">
            <summary>
            Gets or sets the component types
            </summary>
            <summary>
            Refreshes the underlying content
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityName.SemanticEquals(System.Object)">
            <summary>
            Semantic equality function
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityName.ShouldSerializeSourceEntityKey">
            <summary>
            Never need to serialize the entity source key
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityName.ToString">
            <summary>
            Represent the name as a string
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityName.ToDisplay">
            <summary>
            Represent the entity name as a display string
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.EntityNameComponent">
            <summary>
            Represents a name component which is bound to a name
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityNameComponent.#ctor">
            <summary>
            Entity name component
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityNameComponent.#ctor(System.String)">
            <summary>
            Creates the entity name component with the specified value
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityNameComponent.#ctor(System.Guid,System.String)">
            <summary>
            Creates the entity name component with the specified value and part type classifier
            </summary>
            <param name="partTypeKey"></param>
            <param name="value"></param>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityNameComponent.ComponentTypeKey">
            <summary>
            Gets or sets the component type key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityNameComponent.PhoneticAlgorithm">
            <summary>
            Gets or sets the phonetic algorithm
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityNameComponent.PhoneticAlgorithmKey">
            <summary>
            Gets or sets the identifier of the phonetic code
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityNameComponent.PhoneticCode">
            <summary>
            Gets or sets the phonetic code of the reference term
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityNameComponent.ShouldSerializePhoneticAlgorithmKey">
            <summary>
            Should serialize
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityNameComponent.ToString">
            <summary>
            Value of the name
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.EntityRelationship">
            <summary>
            Represents an association between two entities
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityRelationship.#ctor">
            <summary>
            Default constructor for entity relationship
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityRelationship.#ctor(System.Nullable{System.Guid},OpenIZ.Core.Model.Entities.Entity)">
            <summary>
            Entity relationship between <paramref name="source"/> and <paramref name="target"/>
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityRelationship.#ctor(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Entity relationship between <paramref name="source"/> and <paramref name="target"/>
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityRelationship.Holder">
            <summary>
            The entity that this relationship targets
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityRelationship.HolderKey">
            <summary>
            The entity that this relationship targets
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityRelationship.InversionIndicator">
            <summary>
            The inversion indicator
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityRelationship.Quantity">
            <summary>
            Represents the quantity of target in source
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityRelationship.RelationshipType">
            <summary>
            Gets or sets the association type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityRelationship.RelationshipTypeKey">
            <summary>
            Association type key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityRelationship.TargetEntity">
            <summary>
            Target entity reference
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityRelationship.TargetEntityKey">
            <summary>
            The target of the association
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityRelationship.Clean">
            <summary>
            Clean the entity
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityRelationship.IsEmpty">
            <summary>
            Is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityRelationship.Refresh">
            <summary>
            Refresh this entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityRelationship.SemanticEquals(System.Object)">
            <summary>
            Determine semantic equality
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityRelationship.ShouldSerializeInversionIndicator">
            <summary>
            Should serialize inversion indicator?
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityRelationship.ShouldSerializeQuantity">
            <summary>
            Should serialize quantity?
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityRelationship.ShouldSerializeSourceEntityKey">
            <summary>
            Shoudl serialize source entity?
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityRelationship.ToString">
            <summary>
            Represent as string
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.EntityTelecomAddress">
            <summary>
            Represents an entity telecom address
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityTelecomAddress.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityTelecomAddress.#ctor(System.Guid,System.String)">
            <summary>
            Creates a new entity telecom address with specified use and value
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityTelecomAddress.AddressUse">
            <summary>
            Gets or sets the name use
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityTelecomAddress.AddressUseKey">
            <summary>
            Gets or sets the name use key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityTelecomAddress.IETFValue">
            <summary>
            Gets or sets the value as an IETF value
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.EntityTelecomAddress.Value">
            <summary>
            Gets or sets the value of the telecom address
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityTelecomAddress.IsEmpty">
            <summary>
            Empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityTelecomAddress.Refresh">
            <summary>
            Forces refresh of the delay load properties
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.EntityTelecomAddress.SemanticEquals(System.Object)">
            <summary>
            Semantic equality function
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.GenericComponentValues`1">
            <summary>
            A generic class representing components of a larger item (i.e. address, name, etc);
            </summary>
            <typeparam name="TBoundModel"></typeparam>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.GenericComponentValues`1.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.GenericComponentValues`1.#ctor(System.Guid,System.String)">
            <summary>
            Creates a generic component value with the specified classifier
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.GenericComponentValues`1.#ctor(System.String)">
            <summary>
            Constructor with the specified identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.GenericComponentValues`1.ComponentType">
            <summary>
            Gets or sets the type of address component
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.GenericComponentValues`1.ComponentTypeKey">
            <summary>
            Component type key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.GenericComponentValues`1.Value">
            <summary>
            Gets or sets the value of the name component
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.GenericComponentValues`1.IsEmpty">
            <summary>
            Gets if the item is empty
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.GenericComponentValues`1.Refresh">
            <summary>
            Forces refreshing of delay load properties
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.GenericComponentValues`1.SemanticEquals(System.Object)">
            <summary>
            Semantic equality function
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.GenericComponentValues`1.ShouldSerializeComponentTypeKey">
            <summary>
            Should serialize component type key
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.GenericComponentValues`1.ShouldSerializeSourceEntityKey">
            <summary>
            Never need to serialize the entity source key
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.ManufacturedMaterial">
            <summary>
            Manufactured material
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.ManufacturedMaterial.#ctor">
            <summary>
            Creates a new manufactured material
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.ManufacturedMaterial.LotNumber">
            <summary>
            Gets or sets the lot number of the manufactured material
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.ManufacturedMaterial.SemanticEquals(System.Object)">
            <summary>
            Semantic equality
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.Material">
            <summary>
            Represents a material
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Material.#ctor">
            <summary>
            Material ctor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Material.ExpiryDate">
            <summary>
            Gets or sets the expiry date of the material
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Material.FormConcept">
            <summary>
            Gets or sets the concept which dictates the form of the material (solid, liquid, capsule, injection, etc.)
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Material.FormConceptKey">
            <summary>
            Gets or sets the form concept's key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Material.IsAdministrative">
            <summary>
            True if the material is simply administrative
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Material.Quantity">
            <summary>
            The base quantity of the object in the units. This differs from quantity on the relationship
            which is a /per ...
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Material.QuantityConcept">
            <summary>
            Gets or sets the concept which dictates the unit of measure for a single instance of this entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Material.QuantityConceptKey">
            <summary>
            Gets or sets the quantity concept ref
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Material.Refresh">
            <summary>
            Forces refresh of the delay load properties
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Material.SemanticEquals(System.Object)">
            <summary>
            Semantic equality function
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.Organization">
            <summary>
            Organization entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Organization.#ctor">
            <summary>
            Organization ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Organization.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:OpenIZ.Core.Model.Entities.Organization"/> class.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Organization.IndustryConcept">
            <summary>
            Gets or sets the industry concept key
            </summary>
            <summary>
            Gets or sets the industry in which the organization operates
            </summary>
            <remarks>
            The industry concept is used to classify the industrial sector to which an organization belongs. For example,
            an organization may be of type NGO, but the industry in which that organization operates is Healthcare
            </remarks>
            <see cref="P:OpenIZ.Core.Model.Entities.Organization.IndustryConceptKey"/>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Organization.IndustryConceptKey">
            <summary>
            Gets or sets the concept key which classifies the industry in which the organization operates
            </summary>
            <remarks>
            The industry concept is used to classify the industrial sector to which an organization belongs. For example,
            an organization may be of type NGO, but the industry in which that organization operates is Healthcare
            </remarks>
            <see cref="P:OpenIZ.Core.Model.Entities.Organization.IndustryConcept"/>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Organization.Refresh">
            <summary>
            Forces reload of delay load properties
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Organization.SemanticEquals(System.Object)">
            <summary>
            Semantic equality function
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.Person">
            <summary>
            Represents an entity which is a person
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Person.#ctor">
            <summary>
            Person constructor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Person.AsSecurityUser">
            <summary>
            Gets the security user account associated with this person if applicable
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Person.DateOfBirth">
            <summary>
            Gets or sets the person's date of birth
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Person.DateOfBirthPrecision">
            <summary>
            Gets or sets the precision ofthe date of birth
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Person.DateOfBirthXml">
            <summary>
            Gets the date of birth as XML
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Person.LanguageCommunication">
            <summary>
            Gets the person's languages of communication
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Person.ShouldSerializeDateOfBirthPrecision">
            <summary>
            Should serialize date of birth precision
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Person.SemanticEquals(System.Object)">
            <summary>
            Semantic equality function
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.PersonLanguageCommunication">
            <summary>
            Represents a single preferred communication method for the entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.PersonLanguageCommunication.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.PersonLanguageCommunication.#ctor(System.String,System.Boolean)">
            <summary>
            Language communication code ctor with specified code and preference
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.PersonLanguageCommunication.IsPreferred">
            <summary>
            Gets or set the user's preference indicator
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.PersonLanguageCommunication.LanguageCode">
            <summary>
            Gets or sets the language code
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.PersonLanguageCommunication.SemanticEquals(System.Object)">
            <summary>
            Semantic equality function
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.Place">
            <summary>
            An entity which is a place where healthcare services are delivered
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Place.#ctor">
            <summary>
            Place ctor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Place.ClassConceptKey">
            <summary>
            Gets or sets the class concept key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Place.IsMobile">
            <summary>
            True if location is mobile
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Place.Lat">
            <summary>
            Gets or sets the latitude
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Place.Lng">
            <summary>
            Gets or sets the longitude
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Place.ShouldSerializeIsMobile">
            <summary>
            Should serialize mobile
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Place.ShouldSerializeLat">
            <summary>
            Should serialize latitude
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Place.ShouldSerializeLng">
            <summary>
            Should serialize longitude
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.Place.Services">
            <summary>
            Gets the services
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.Place.SemanticEquals(System.Object)">
            <summary>
            Determine semantic equality
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Entities.PlaceService">
            <summary>
            Represents a service for a place
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.PlaceService.ServiceConcept">
            <summary>
            Gets or sets the service concept
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.PlaceService.ServiceConceptKey">
            <summary>
            Gets or sets the service concept key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Entities.PlaceService.ServiceSchedule">
            <summary>
            The schedule that the service is offered
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.PlaceService.Refresh">
            <summary>
            Refresh the delay load properties
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Entities.PlaceService.SemanticEquals(System.Object)">
            <summary>
            Semantic equality
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.EntityLoader.EntitySource">
            <summary>
            Delay loader class
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.EntityLoader.EntitySource.DummyEntitySource">
            <summary>
            Dummy entity source
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.EntitySource.DummyEntitySource.Get``1(System.Nullable{System.Guid})">
            <summary>
            Gets the specified object
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.EntitySource.DummyEntitySource.Get``1(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Gets the specified object
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.EntitySource.DummyEntitySource.GetRelations``1(System.Nullable{System.Guid},System.Nullable{System.Decimal})">
            <summary>
            Gets the specified relations
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.EntitySource.DummyEntitySource.GetRelations``1(System.Nullable{System.Guid})">
            <summary>
            Gets the specified relations
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.EntitySource.DummyEntitySource.Query``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Query 
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.EntityLoader.EntitySource.m_provider">
            <summary>
            Delay load provider
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.EntitySource.#ctor(OpenIZ.Core.Model.EntityLoader.IEntitySourceProvider)">
            <summary>
            Delay loader ctor
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.EntityLoader.EntitySource.Current">
            <summary>
            Gets the current delay loader
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.EntitySource.Get``1(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Get the specified object / version
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.EntitySource.Get``1(System.Nullable{System.Guid})">
            <summary>
            Get the current version of the specified object
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.EntityLoader.EntitySource.Provider">
            <summary>
            Gets the current entity source provider
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.EntityLoader.IEntitySourceProvider">
            <summary>
            Delay load provider
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.IEntitySourceProvider.Get``1(System.Nullable{System.Guid})">
            <summary>
            Get the specified object
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.IEntitySourceProvider.Get``1(System.Nullable{System.Guid},System.Nullable{System.Guid})">
            <summary>
            Get the specified object
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.IEntitySourceProvider.Query``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Query the specified data from the delay load provider
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.IEntitySourceProvider.GetRelations``1(System.Nullable{System.Guid},System.Nullable{System.Decimal})">
            <summary>
            Get relationships
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.EntityLoader.IEntitySourceProvider.GetRelations``1(System.Nullable{System.Guid})">
            <summary>
            Get relationships
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.LoadState">
            <summary>
            Identifies the state of loading of the object
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.LoadState.New">
            <summary>
            Newly created, not persisted, no data loaded
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.LoadState.PartialLoad">
            <summary>
            Object was partially loaded meaning some properties are not populated
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.LoadState.FullLoad">
            <summary>
            The object was fully loaded
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.IdentifiedData">
            <summary>
            Represents data that is identified by a key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.IdentifiedData.IsDelayLoadEnabled">
            <summary>
            True if the class is currently loading associations when accessed
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.IdentifiedData.Key">
            <summary>
            The internal primary key value of the entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.IdentifiedData.ShouldSerializeKey">
            <summary>
            True if key should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenIZ.Core.Model.IdentifiedData.Type">
            <summary>
            Gets the type
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.IdentifiedData.DelayLoad``1(System.Nullable{System.Guid},``0)">
            <summary>
            Get associated entity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.IdentifiedData.Refresh">
            <summary>
            Force reloading of delay load properties
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.IdentifiedData.ModifiedOn">
            <summary>
            Gets or sets the modified on time
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.IdentifiedData.ShouldSerializeModifiedOn">
            <summary>
            Never serialize modified on
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenIZ.Core.Model.IdentifiedData.Tag">
            <summary>
            Gets a tag which changes whenever the object is updated
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.IdentifiedData.Clean">
            <summary>
            Cleans the identified data of any "empty" stuff
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.IdentifiedData.IsEmpty">
            <summary>
            True if the object is empty
            </summary>
            <returns></returns>
        </member>
        <member name="P:OpenIZ.Core.Model.IdentifiedData.LoadState">
            <summary>
            Gets or sets whether the object was partial loaded
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.IdentifiedData.Clone">
            <summary>
            Clone the specified data
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.IdentifiedData.GetLocked">
            <summary>
            Clone the specified data
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.IdentifiedData.SemanticEquals(System.Object)">
            <summary>
            Determines the semantic equality of this object an <paramref name="obj"/>
            </summary>
            <param name="obj">The object to which the semantic equality should be evaluated</param>
            <returns>True if this object is semantically the same as <paramref name="obj"/></returns>
            <remarks>
            In OpenIZ's data model, an object is semantically equal when the two objects clinically mean the
            same thing. This differs from reference equality (when two objects are the same instance) and value equality 
            (when two objects carry all the same values). For example, two <see cref="T:OpenIZ.Core.Model.Acts.ActParticipation"/> instances may
            be semantically equal when they both represent the same entity playing the same role in the same act as one another, 
            even though their keys and effective / obsolete version properties may be different.
            </remarks>
        </member>
        <member name="M:OpenIZ.Core.Model.IdentifiedData.ToDisplay">
            <summary>
            To display value
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Interfaces.IBaseEntityData">
            <summary>
            Represents base entity data
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IBaseEntityData.CreatedByKey">
            <summary>
            Gets or sets the creator of the data
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IBaseEntityData.ObsoletedByKey">
            <summary>
            Gets or sets teh obsoletor of the data
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IBaseEntityData.CreationTime">
            <summary>
            Gets or sets the time when the data was created
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IBaseEntityData.ObsoletionTime">
            <summary>
            Gets or sets the time with the data was obsoleted.
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Interfaces.IExtendable">
            <summary>
            Represents a object that can be extended with IModelExtensions
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IExtendable.Extensions">
            <summary>
            Gets the list of extensions
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Interfaces.IIdentifiedEntity">
            <summary>
            Identified entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IIdentifiedEntity.LoadState">
            <summary>
            Gets the load state of the entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IIdentifiedEntity.Key">
            <summary>
            Gets the identifier for the entity
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Interfaces.IModelExtension">
            <summary>
            Model extension
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IModelExtension.ExtensionTypeKey">
            <summary>
            Gets the extension type key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IModelExtension.Data">
            <summary>
            Gets the data for the extension
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IModelExtension.Display">
            <summary>
            Gets the display value
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IModelExtension.Value">
            <summary>
            Gets the value of the extension
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Interfaces.ISimpleAssociation">
            <summary>
            Represents bound relational data
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.ISimpleAssociation.SourceEntityKey">
            <summary>
            Gets or sets the source entity key
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Interfaces.ISecurable">
            <summary>
            Represents a data model class which can be used as a securable
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.ISecurable.Policies">
            <summary>
            Policies
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Interfaces.ITaggable">
            <summary>
            Represents a class which can hold tags
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.ITaggable.Tags">
            <summary>
            Gets the tags associated with the object
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Interfaces.ITag">
            <summary>
            Represents a tag
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.ITag.TagKey">
            <summary>
            Gets the key for the tag
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.ITag.Value">
            <summary>
            Gets the value for the tag
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Interfaces.IVersionedAssociation">
            <summary>
            Versioned relationship
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IVersionedAssociation.EffectiveVersionSequenceId">
            <summary>
            Effective version sequence
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IVersionedAssociation.ObsoleteVersionSequenceId">
            <summary>
            Obsolete version sequence
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Interfaces.IVersionedEntity">
            <summary>
            Versioned entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IVersionedEntity.VersionSequence">
            <summary>
            Gets the version sequence
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IVersionedEntity.VersionKey">
            <summary>
            Gets the version key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IVersionedEntity.PreviousVersionKey">
            <summary>
            Gets the previous version's key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Interfaces.IVersionedEntity.PreviousVersion">
            <summary>
            Gets the previous version
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.CastMap">
            <summary>
            Cast map
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.CastMap.TypeName">
            <summary>
            Type name
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.CastMap.ModelType">
            <summary>
            Gets the model CLR type
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.ClassMap">
            <summary>
            Class mapping
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassMap.DomainType">
            <summary>
            Gets the domain CLR type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassMap.ModelType">
            <summary>
            Gets the model CLR type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassMap.ModelClass">
            <summary>
            Gets or sets the model class for the mapper
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassMap.DomainClass">
            <summary>
            Gets or sets the domain class for the mapper
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassMap.CollapseKey">
            <summary>
            Gets or sets the association maps which are used for collapsing keys
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassMap.Property">
            <summary>
            Gets or sets the property maps
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassMap.ParentDomainProperty">
            <summary>
            Gets or sets the base proeprty 
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassMap.Cast">
            <summary>
            Casting
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ClassMap.TryGetCollapseKey(System.String,OpenIZ.Core.Model.Map.CollapseKey@)">
            <summary>
            Try to get a collapse key
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ClassMap.TryGetModelProperty(System.String,OpenIZ.Core.Model.Map.PropertyMap@)">
            <summary>
            Try to get a property map 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ClassMap.Validate">
            <summary>
            Validate the class map
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ClassMap.TryGetDomainProperty(System.String,OpenIZ.Core.Model.Map.PropertyMap@)">
            <summary>
            Try to get a property map 
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.ClassRedirect">
            <summary>
            Class redirect on mapper
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassRedirect.FromType">
            <summary>
            Gets the domain CLR type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassRedirect.FromClass">
            <summary>
            Gets or sets the model class for the mapper
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ClassRedirect.Property">
            <summary>
            Gets or sets the property maps
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.CollapseKey">
            <summary>
            Association map
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.CollapseKey.PropertyName">
            <summary>
            Gets or sets the name of the property can be collapsed if a key is used
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.CollapseKey.KeyName">
            <summary>
            Gets or sets the key in the domain model which "PropertyName" can be collapsed
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.CollapseKey.Validate(System.Type)">
            <summary>
            Validate the collapse key
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.MapUtil">
            <summary>
            Map utility
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Map.MapUtil.s_wireMaps">
            <summary>
            Maps from wire format to real format
            Key - string in the format {FROM}>{TO}
            Value - MethodInfo of the method that will perform the operation to convert
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.MapUtil.RegisterMap(System.Type,System.Type,System.Reflection.MethodInfo)">
            <summary>
            Register a map
            </summary>
            <param name="sourceType"></param>
            <param name="destType"></param>
            <param name="method"></param>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.MapUtil.HasMap(System.Type,System.Type)">
            <summary>
            Returns true if the maps contains 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.MapUtil.FindConverter(System.Type,System.Type,System.Type)">
            <summary>
            Find the converter for the types specified
            </summary>
            <param name="scanType">The type to scan in</param>
            <param name="sourceType">The source type</param>
            <param name="destType">The destination type</param>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.MapUtil.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            Attempt casting <paramref name="value"/> to <paramref name="destType"/> placing the result 
            in <paramref name="result"/>
            </summary>
            <remarks>If null is passed as the <paramref name="resultDetails"/> parameter then a <see cref="T:MARC.Everest.Exceptions.VocabularyException"/>
            will be thrown whenever vocabulary cannot be cast.</remarks>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.ModelExpressionVisitor">
            <summary>
            Model conversion visitor is used to convert a lambda expression based on the business model 
            into a domain model lamda expression
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.ModelExpressionVisitor.LambdaCorrectionVisitor">
            <summary>
            A small visitor which corrects lambda expressions to skip over associative
            classes
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.LambdaCorrectionVisitor.#ctor(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression,OpenIZ.Core.Model.Map.ModelMapper)">
            <summary>
            Creates a new instance of the lambda correction visitor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.LambdaCorrectionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visit the node
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.LambdaCorrectionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visit a binary method
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.GetConstantValue(System.Linq.Expressions.Expression)">
            <summary>
            Attempt to get constant value
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.#ctor(OpenIZ.Core.Model.Map.ModelMapper,System.Linq.Expressions.ParameterExpression[])">
            <summary>
            Model conversion visitor 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visit an expression
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <summary>
            Map type binary
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visit unary expression
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.VisitConvert(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Remove unnecessary convert statement
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.VisitLambdaGeneric(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visit a lambda expression
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visit method call
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.VisitExpressionList(System.Collections.Generic.ICollection{System.Linq.Expressions.Expression})">
            <summary>
            Visit each expression in the args
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visit a binary method
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visit parameter
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visit member access, converts member expression type and name
            </summary>
            <param name="node">The node to be converted</param>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.ModelMap">
            <summary>
            Model map format class
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMap.Load(System.IO.Stream)">
            <summary>
            Creates the specified model mmap
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ModelMap.Class">
            <summary>
            Gets or sets the class mapping
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMap.GetModelClassMap(System.Type)">
            <summary>
            Get a class map for the specified type
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMap.Validate">
            <summary>
            Validate the map
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMap.GetModelClassMap(System.Type,System.Type)">
            <summary>
            Get the model class map between two types
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.ModelMapEventArgs">
            <summary>
            Represents model mapping event arguments
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ModelMapEventArgs.Key">
            <summary>
            Domain object
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ModelMapEventArgs.ModelObject">
            <summary>
            Identified data model object
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ModelMapEventArgs.ObjectType">
            <summary>
            Gets or sets the domain object type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ModelMapEventArgs.Cancel">
            <summary>
            Gets or sets a cancel comand
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.ModelMapper">
            <summary>
            Model mapper
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Map.ModelMapper.primitives">
            <summary>
            Primitive types
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.MapModelProperty(System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Maps a model property at a root level only
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.MapModelProperty(System.Type,System.Type,System.Reflection.PropertyInfo)">
            <summary>
            Maps a model property at a root level only
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.#ctor(System.IO.Stream)">
            <summary>
            Creates a new mapper from source stream
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.Load(System.IO.Stream)">
            <summary>
            Load mapping from a stream
            </summary>
        </member>
        <member name="E:OpenIZ.Core.Model.Map.ModelMapper.MappingToModel">
            <summary>
            Fired anytime any model mapper maps to a model
            </summary>
        </member>
        <member name="E:OpenIZ.Core.Model.Map.ModelMapper.MappedToModel">
            <summary>
            Fired anytime any model mapper maps finished
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.FireMappingToModel(System.Object,System.Guid,OpenIZ.Core.Model.IdentifiedData)">
            <summary>
            Fires the pre map returning whether cancellation is necessary
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.FireMappedToModel(System.Object,System.Guid,OpenIZ.Core.Model.IdentifiedData)">
            <summary>
            Fires that a map has occurred
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.MapTypeCast(System.Linq.Expressions.UnaryExpression,System.Linq.Expressions.Expression)">
            <summary>
            Maps a cast to appropriate path
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.MapModelMember(System.Linq.Expressions.MemberExpression,System.Linq.Expressions.Expression,System.Type)">
            <summary>
            Map member 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.ExtractDomainType(System.Type)">
            <summary>
            Extracts a domain type from a generic if needed
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.MapModelType(System.Type)">
            <summary>
            Gets the domain type for the specified model type
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.CreateLambdaMemberAdjustmentExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression)">
            <summary>
            Create a traversal expression for a lambda expression
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.MapModelExpression``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            Convert the specified lambda expression from model into query
            </summary>
            <param name="expression">The expression to be converted</param>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.MapModelInstance``2(``0)">
            <summary>
            Map model instance
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.MapDomainInstance``2(``0,System.Boolean,System.Collections.Generic.HashSet{System.Guid})">
            <summary>
            Map model instance
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.ModelMapper.MapDomainInstance(System.Type,System.Type,System.Object,System.Boolean,System.Collections.Generic.HashSet{System.Guid})">
            <summary>
            Map domain instance
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.OpenIZConvert">
            <summary>
            OpenIZ conversion helper functions
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.NullGuidToByte(System.Nullable{System.Guid})">
            <summary>
            Guid > Byte[]
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.ByteToNullGuid(System.Byte[])">
            <summary>
            Byte[] > GUID
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.BooleanToInt(System.Boolean)">
            <summary>
            Boolean to int
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.IntToBoolean(System.Int32)">
            <summary>
            Boolean to int
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.GuidToByte(System.Guid)">
            <summary>
            Guid > Byte[]
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.ByteToGuid(System.Byte[])">
            <summary>
            Byte[] > GUID
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.DateTimeToDateTimeOffset(System.Nullable{System.DateTime})">
            <summary>
            DT > DTO
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.DateTimeOffsetToDateTime(System.Nullable{System.DateTimeOffset})">
            <summary>
            DTO > DT
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.DateTimeToDateTimeOffset(System.DateTime)">
            <summary>
            DT > DTO
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.DateTimeOffsetToDateTime(System.DateTimeOffset)">
            <summary>
            DTO > DT
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.ToDateTime(System.DateTime)">
            <summary>
            Parse a date time into an object
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.ParseDateTime(System.Int32)">
            <summary>
            Parse a date time from an object
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.ToDateTimeOffset(System.DateTimeOffset)">
            <summary>
            Parse a date time into an object
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.OpenIZConvert.ParseDateTimeOffset(System.Int32)">
            <summary>
            Parse a date time from an object
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.PropertyMap">
            <summary>
            Represents a property map
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.PropertyMap.ModelName">
            <summary>
            Gets or sets the name of the property in the model
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.PropertyMap.DomainName">
            <summary>
            Gets or sets the name of the property in the domain model
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.PropertyMap.Via">
            <summary>
            Identifies the route 
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.PropertyMap.DontLoad">
            <summary>
            When this property is a via then traverse this
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.PropertyMap.Aggregate">
            <summary>
            Disaggregation function
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.PropertyMap.OrderBy">
            <summary>
            Order By
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.PropertyMap.SortOrder">
            <summary>
            Gets or sets the sort order
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.PropertyMap.IsAssociative">
            <summary>
            This property doesn't "belong on IMS"
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Map.PropertyMap.Validate(System.Type,System.Type)">
            <summary>
            Validate the property type
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.SortOrderType">
            <summary>
            Represents sort order
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Map.SortOrderType.OrderBy">
            <summary>
            Order by ascending.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Map.SortOrderType.OrderByDescending">
            <summary>
            Order by descending.
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.ResultDetailType">
            <summary>
            Result detail types
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Map.ResultDetailType.Error">
            <summary>
            Represents an error.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Map.ResultDetailType.Warning">
            <summary>
            Represents a warning.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Map.ResultDetailType.Information">
            <summary>
            Represents information.
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Map.ValidationResultDetail">
            <summary>
            Represents a result detail which is a validation result
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ValidationResultDetail.Message">
            <summary>
            Gets or sets the message which caused the error
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ValidationResultDetail.CausedBy">
            <summary>
            Gets or sets the exception that caused this error
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ValidationResultDetail.Location">
            <summary>
            Gets or sets the location
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Map.ValidationResultDetail.Level">
            <summary>
            The level of the warning
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Patch.Patch">
            <summary>
            Represents a series of patch instructions 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Patch.Patch.#ctor">
            <summary>
            Patch
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Patch.Patch.Version">
            <summary>
            Gets or sets the version of the patch file
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Patch.Patch.AppliesTo">
            <summary>
            Application version
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Patch.Patch.Operation">
            <summary>
            A list of patch operations to be applied to the object
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Patch.Patch.ToString">
            <summary>
            To string representation
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Patch.PatchOperation">
            <summary>
            Represents a single patch operation
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Patch.PatchOperation.#ctor">
            <summary>
            Patch operation default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Patch.PatchOperation.#ctor(OpenIZ.Core.Model.Patch.PatchOperationType,System.String,System.Object)">
            <summary>
            Patch operation
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Patch.PatchOperation.OperationType">
            <summary>
            Gets or sets the operation type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Patch.PatchOperation.Path">
            <summary>
            Gets or sets the path
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Patch.PatchOperation.Value">
            <summary>
            Get or sets the value
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Patch.PatchOperation.ToString">
            <summary>
            To string representation
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Patch.PatchOperationType">
            <summary>
            Represents a patch operation type
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Patch.PatchOperationType.Add">
            <summary>
            Patch operation adds the specified value to the array
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Patch.PatchOperationType.Remove">
            <summary>
            Patch operation removes the specified value from the array
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Patch.PatchOperationType.Replace">
            <summary>
            Patch operation replaces the specified item at the path 
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Patch.PatchOperationType.Test">
            <summary>
            Patch should test value before proceeding
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Patch.PatchTarget">
            <summary>
            Represents a target of a patch
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Patch.PatchTarget.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Patch.PatchTarget.#ctor(OpenIZ.Core.Model.IdentifiedData)">
            <summary>
            Construct a new patch target
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Patch.PatchTarget.TypeXml">
            <summary>
            Identifies the target type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Patch.PatchTarget.Type">
            <summary>
            Represents the type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Patch.PatchTarget.Key">
            <summary>
            Gets or sets the key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Patch.PatchTarget.VersionKey">
            <summary>
            Gets or sets the key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Patch.PatchTarget.Tag">
            <summary>
            Gets or sets the tag of the item
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Query.NameValueCollection">
            <summary>
            Name value collection
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.NameValueCollection.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.NameValueCollection.#ctor(System.Int32)">
            <summary>
            Name value collection iwth capacity
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.NameValueCollection.#ctor(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{System.String}})">
            <summary>
            Copy constructor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.NameValueCollection.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Creates a new name value collection from the kvp array
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.NameValueCollection.ParseQueryString(System.String)">
            <summary>
            Parse a query string
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.NameValueCollection.Add(System.String,System.String)">
            <summary>
            Add the specified key and value to the collection
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.NameValueCollection.ToString">
            <summary>
            Represent as a string
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenIZ.Core.Model.Query.QueryExpressionBuilder">
            <summary>
            Expression visitor which turns a LINQ expression against a query type to an HTTP header
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor">
            <summary>
            Http query expression visitor.
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor.#ctor(System.Collections.Generic.List{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Initializes a new instance of the <see cref="T:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor"/> class.
            </summary>
            <param name="workingDictionary">The working dictionary.</param>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor.AddCondition(System.String,System.Object)">
            <summary>
            Add a condition if not already present
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
            Visit a query expression
            </summary>
            <returns>The modified expression list, if any one of the elements were modified; otherwise, returns the original
            expression list.</returns>
            <param name="nodes">The expressions to visit.</param>
            <param name="node">Node.</param>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visit method call
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor.VisitMemberAccess(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visits the member access.
            </summary>
            <returns>The member access.</returns>
            <param name="expr">Expr.</param>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor.VisitLambdaGeneric(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Visits the lambda generic.
            </summary>
            <returns>The lambda generic.</returns>
            <param name="node">Node.</param>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visit a binary expression which is in the form of A(operator)B
            </summary>
            <returns>The binary.</returns>
            <param name="node">Node.</param>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor.ExtractValue(System.Linq.Expressions.Expression)">
            <summary>
            Extract a value
            </summary>
            <returns>The value.</returns>
            <param name="access">Access.</param>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor.ExtractPath(System.Linq.Expressions.Expression)">
            <summary>
            Extract the path
            </summary>
            <returns>The path.</returns>
            <param name="access">Access.</param>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.HttpQueryExpressionVisitor.BuildGuardExpression(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Build a guard expression
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionBuilder.BuildQuery``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            Builds the query dictionary .
            </summary>
            <returns>The query.</returns>
            <param name="model">Model.</param>
            <typeparam name="TModel">The 1st type parameter.</typeparam>
        </member>
        <member name="T:OpenIZ.Core.Model.Query.QueryExpressionParser">
            <summary>
            A class which is responsible for translating a series of Query Parmaeters to a LINQ expression
            to be passed to the persistence layer
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionParser.BuildLinqExpression``1(OpenIZ.Core.Model.Query.NameValueCollection)">
            <summary>
            Buidl linq expression
            </summary>
            <typeparam name="TModelType"></typeparam>
            <param name="httpQueryParameters"></param>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionParser.BuildLinqExpression``1(OpenIZ.Core.Model.Query.NameValueCollection,System.Collections.Generic.Dictionary{System.String,System.Delegate})">
            <summary>
            Build a LINQ expression
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionParser.BuildLinqExpression``1(OpenIZ.Core.Model.Query.NameValueCollection,System.Collections.Generic.Dictionary{System.String,System.Delegate},System.Boolean)">
            <summary>
            Builds the linq expression.
            </summary>
            <typeparam name="TModelType">The type of the t model type.</typeparam>
            <param name="httpQueryParameters">The HTTP query parameters.</param>
            <param name="variables">The variables.</param>
            <param name="safeNullable">if set to <c>true</c> [safe nullable].</param>
            <returns>Expression&lt;Func&lt;TModelType, System.Boolean&gt;&gt;.</returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Query.QueryExpressionParser.BuildLinqExpression``1(OpenIZ.Core.Model.Query.NameValueCollection,System.String,System.Collections.Generic.Dictionary{System.String,System.Delegate},System.Boolean)">
            <summary>
            Build LINQ expression
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.ExtensionMethods">
            <summary>
            Reflection tools
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.ExtensionMethods.Value(OpenIZ.Core.Model.Entities.EntityAddress,System.Guid)">
            <summary>
            Get postal code
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.ExtensionMethods.LoadProperty``1(OpenIZ.Core.Model.IdentifiedData,System.String)">
            <summary>
            Delay load property
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.ExtensionMethods.LoadCollection``1(OpenIZ.Core.Model.IdentifiedData,System.String)">
            <summary>
            Delay load property
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.ExtensionMethods.LoadProperty(OpenIZ.Core.Model.IdentifiedData,System.String)">
            <summary>
            Delay load property
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.ExtensionMethods.Aggregate(System.Linq.Expressions.Expression,OpenIZ.Core.Model.Map.AggregationFunctionType)">
            <summary>
            Create aggregation functions
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.ExtensionMethods.Convert``1(System.Object)">
            <summary>
            The purpose of this method is to convert object <paramref name="me"/> to <typeparamref name="TReturn"/>. Why?
            Because if you have an instance of Act that actually needs to be a SubstanceAdministration we can't just cast
            so we have to copy.
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.ExtensionMethods.CopyObjectData``1(``0,``0)">
            <summary>
            Update property data if required
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.ExtensionMethods.GetGenericMethod(System.Type,System.String,System.Type[],System.Type[])">
            <summary>
            Get generic method
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.ExtensionMethods.GetXmlProperty(System.Type,System.String,System.Boolean)">
            <summary>
            Get a property based on XML property and/or serialization redirect
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.ExtensionMethods.HashCode(System.Byte[])">
            <summary>
            Compute a basic hash string
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.ExtensionMethods.HasProperty(System.Dynamic.ExpandoObject,System.String)">
            <summary>
            Determines whether the specified property name has property.
            </summary>
            <param name="source">The source.</param>
            <param name="propertyName">Name of the property.</param>
            <returns><c>true</c> if the specified property name has property; otherwise, <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException">source - Value cannot be null</exception>
            <exception cref="T:System.ArgumentException">Value cannot be null or empty - propertyName</exception>
        </member>
        <member name="M:OpenIZ.Core.Model.ExtensionMethods.GetFullName(OpenIZ.Core.Model.Entities.UserEntity,System.Guid)">
            <summary>
            Gets the full name of the user entity.
            </summary>
            <param name="entity">The user entity.</param>
            <param name="nameUseKey">The name use key.</param>
            <returns>Returns the full name of the user entity.</returns>
            <exception cref="T:System.ArgumentNullException">If the entity is null.</exception>
        </member>
        <member name="M:OpenIZ.Core.Model.ExtensionMethods.IsActive(System.Linq.Expressions.Expression,System.Object)">
            <summary>
            Create a version filter
            </summary>
            <param name="me">Me.</param>
            <param name="domainInstance">The domain instance.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:OpenIZ.Core.Model.ExtensionMethods.IsActive(System.Linq.Expressions.Expression)">
            <summary>
            Create a version filter
            </summary>
            <param name="me">Me.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:OpenIZ.Core.Model.ExtensionMethods.LatestVersionOnly``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Gets the latest version of the versioned entity data instance from a given list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source">The source.</param>
            <returns>Returns the latest version only of the versioned entity data.</returns>
        </member>
        <member name="M:OpenIZ.Core.Model.ExtensionMethods.SemanticEquals``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Determine semantic equality of each item in me and other
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.ExtensionMethods.Sort(System.Linq.Expressions.Expression,System.String,OpenIZ.Core.Model.Map.SortOrderType)">
            <summary>
            Create sort expression.
            </summary>
            <param name="me">Me.</param>
            <param name="orderByProperty">The order by property.</param>
            <param name="sortOrder">The sort order.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:OpenIZ.Core.Model.ExtensionMethods.StripGeneric(System.Type)">
            <summary>
            Strips list
            </summary>
            <param name="t">The type.</param>
            <returns>Returns the type.</returns>
        </member>
        <member name="M:OpenIZ.Core.Model.ExtensionMethods.StripNullable(System.Type)">
            <summary>
            Strips any nullable typing.
            </summary>
            <param name="t">The typ.</param>
            <returns>Returns the type.</returns>
        </member>
        <member name="T:OpenIZ.Core.Model.Roles.Patient">
            <summary>
            Represents an entity which is a patient
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Roles.Patient.#ctor">
            <summary>
            Represents a patient
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Roles.Patient.DeceasedDate">
            <summary>
            Gets or sets the date the patient was deceased
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Roles.Patient.DeceasedDateXml">
            <summary>
            Deceased date XML
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Roles.Patient.DeceasedDatePrecision">
            <summary>
            Gets or sets the precision of the date of deceased
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Roles.Patient.MultipleBirthOrder">
            <summary>
            Gets or sets the multiple birth order of the patient 
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Roles.Patient.GenderConceptKey">
            <summary>
            Gets or sets the gender concept key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Roles.Patient.GenderConcept">
            <summary>
            Gets or sets the gender concept
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Roles.Patient.ShouldSerializeDeceasedDateXml">
            <summary>
            Should serialize deceased date?
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Roles.Patient.ShouldSerializeDeceasedDatePrecision">
            <summary>
            Should serialize deceasd date
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.Roles.Patient.ShouldSerializeMultipleBirthOrder">
            <summary>
            Should serialize deceased date?
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Roles.Patient.Refresh">
            <summary>
            Force a refresh of delay load properties
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Roles.Patient.SemanticEquals(System.Object)">
            <summary>
            Semantic equality function
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Roles.Provider">
            <summary>
            Represents a provider role of a person
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Roles.Provider.#ctor">
            <summary>
            Creates a new provider
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Roles.Provider.ProviderSpecialtyKey">
            <summary>
            Gets or sets the provider specialty key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Roles.Provider.ProviderSpecialty">
            <summary>
            Gets or sets the provider specialty
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Roles.Provider.Refresh">
            <summary>
            Force a refresh of the delay load properties
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Roles.Provider.SemanticEquals(System.Object)">
            <summary>
            Semantic equality function
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Security.SecurityApplication">
            <summary>
            Represents a security application
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityApplication.ApplicationSecret">
            <summary>
            Gets or sets the application secret used for authenticating the application
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityApplication.Name">
            <summary>
            Gets or sets the name of the security device/user/role/device.
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Security.SecurityDevice">
            <summary>
            Represents a security device
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityDevice.DeviceSecret">
            <summary>
            Gets or sets the device secret
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityDevice.Name">
            <summary>
            Gets or sets the name of the security device/user/role/devie
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Security.SecurityEntity">
            <summary>
            Security Entity base class
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityEntity.Policies">
            <summary>
            Policies associated with the entity
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Security.PolicyGrantType">
            <summary>
            Policy grant type
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Security.PolicyGrantType.Deny">
            <summary>
            Represents a policy grant type of deny.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Security.PolicyGrantType.Elevate">
            <summary>
            Represnts a policy grant type of elevate.
            </summary>
        </member>
        <member name="F:OpenIZ.Core.Model.Security.PolicyGrantType.Grant">
            <summary>
            Represents a policy grant type of grant.
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Security.SecurityPolicy">
            <summary>
            Represents a simply security policy
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityPolicy.Handler">
            <summary>
            Gets or sets the handler which may handle this policy
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityPolicy.Name">
            <summary>
            Gets or sets the name of the policy
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityPolicy.Oid">
            <summary>
            Gets or sets the universal ID
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityPolicy.IsPublic">
            <summary>
            Whether the property is public
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityPolicy.CanOverride">
            <summary>
            Whether the policy can be elevated over
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Security.SecurityPolicyInstance">
            <summary>
            Represents a security policy instance
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Security.SecurityPolicyInstance.#ctor">
            <summary>
            Default ctor
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Security.SecurityPolicyInstance.#ctor(OpenIZ.Core.Model.Security.SecurityPolicy,OpenIZ.Core.Model.Security.PolicyGrantType)">
            <summary>
            Creates a new policy instance with the specified policy and grant
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityPolicyInstance.PolicyKey">
            <summary>
            Gets or sets the policy key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityPolicyInstance.Policy">
            <summary>
            The policy
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityPolicyInstance.GrantType">
            <summary>
            Gets or sets whether the policy is a Deny
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Security.SecurityRole">
            <summary>
            Security role
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Security.SecurityRole.#ctor">
            <summary>
            Users in teh group
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityRole.Name">
            <summary>
            Gets or sets the name of the security role
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityRole.Description">
            <summary>
            Description of the role
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityRole.Users">
            <summary>
            Gets or sets the security users in the role
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Security.SecurityRole.SemanticEquals(System.Object)">
            <summary>
            Determine semantic equality
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Security.SecurityUser">
            <summary>
            Security user represents a user for the purpose of security 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Security.SecurityUser.#ctor">
            <summary>
            Roles belonging to the user
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.Email">
            <summary>
            Gets or sets the email address of the user
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.EmailConfirmed">
            <summary>
            Gets or sets whether the email address is confirmed
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.InvalidLoginAttempts">
            <summary>
            Gets or sets the number of invalid login attempts by the user
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.Lockout">
            <summary>
            Gets or sets whether the account is locked out
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.LockoutXml">
            <summary>
            Gets or sets the creation time in XML format
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.PasswordHash">
            <summary>
            Gets or sets whether the password hash is enabled
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.SecurityHash">
            <summary>
            Gets or sets whether the security has is enabled
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.TwoFactorEnabled">
            <summary>
            Gets or sets whether two factor authentication is required
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.UserName">
            <summary>
            Gets or sets the logical user name ofthe user
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.UserPhoto">
            <summary>
            Gets or sets the binary representation of the user's photo
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.LastLoginTime">
            <summary>
            The last login time
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.LastLoginTimeXml">
            <summary>
            Gets or sets the creation time in XML format
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.Roles">
            <summary>
            Represents roles
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.PhoneNumber">
            <summary>
            Gets or sets the patient's phone number
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.PhoneNumberConfirmed">
            <summary>
            Gets or sets whether the phone number was confirmed
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.UserClass">
            <summary>
            Gets or sets the user class key
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.Tag">
            <summary>
            Gets the etag
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.Security.SecurityUser.Policies">
            <summary>
            Gets or sets the policies for the user
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Security.SecurityUser.SemanticEquals(System.Object)">
            <summary>
            Determine semantic equality of user
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.Serialization.ModelSerializationBinder">
            <summary>
            Model binding 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.Serialization.ModelSerializationBinder.BindToType(System.String,System.String)">
            <summary>
            Bind to type
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.NonVersionedEntityData">
            <summary>
            Updateable entity data which is not versioned
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.NonVersionedEntityData.UpdatedTime">
            <summary>
            Updated time
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.NonVersionedEntityData.UpdatedTimeXml">
            <summary>
            Gets or sets the creation time in XML format
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.NonVersionedEntityData.ModifiedOn">
            <summary>
            Gets the time this item was modified
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.NonVersionedEntityData.UpdatedBy">
            <summary>
            Gets or sets the user that updated this base data
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.NonVersionedEntityData.UpdatedByKey">
            <summary>
            Gets or sets the created by identifier
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.NonVersionedEntityData.ShouldSerializeUpdatedByKey">
            <summary>
            True if key should be serialized
            </summary>
            <returns></returns>
        </member>
        <member name="M:OpenIZ.Core.Model.NonVersionedEntityData.Refresh">
            <summary>
            Forces refresh
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.VersionedAssociation`1">
            <summary>
            Represents a relational class which is bound on a version boundary
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.VersionedAssociation`1.EffectiveVersionSequenceId">
            <summary>
            Gets or sets the effective version of this type
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.VersionedAssociation`1.ObsoleteVersionSequenceId">
            <summary>
            Gets or sets the obsoleted version identifier
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.VersionedAssociation`1.VersionSeqeuncesSpecified">
            <summary>
            When true, instructs that the sequences be serialized
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.VersionedAssociation`1.ShouldSerializeObsoleteVersionSequenceId">
            <summary>
            Should serialize obsolete
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.VersionedAssociation`1.ShouldSerializeEffectiveVersionSequenceId">
            <summary>
            Should serialize obsolete
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.VersionedAssociation`1.SemanticEquals(System.Object)">
            <summary>
            Determines equality
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Model.VersionedEntityData`1">
            <summary>
            Represents versioned based data, that is base data which has versions
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.VersionedEntityData`1.#ctor">
            <summary>
            Creates a new versioned base data class
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.VersionedEntityData`1.OpenIZ#Core#Model#Interfaces#IVersionedEntity#PreviousVersion">
            <summary>
            Previous version
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.VersionedEntityData`1.Tag">
            <summary>
            Override the ETag
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.VersionedEntityData`1.PreviousVersionKey">
            <summary>
            Gets or sets the previous version key
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.VersionedEntityData`1.ShouldSerializePreviousVersionKey">
            <summary>
            Should serialize previous version?
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.VersionedEntityData`1.PreviousVersion">
            <summary>
            Gets or sets the previous version
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.VersionedEntityData`1.VersionKey">
            <summary>
            Gets or sets the key which represents the version of the entity
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Model.VersionedEntityData`1.VersionSequence">
            <summary>
            The sequence number of the version (for ordering)
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.VersionedEntityData`1.ToString">
            <summary>
            Represent the versioned data as a string
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Model.VersionedEntityData`1.Refresh">
            <summary>
            Force bound attributes to reload
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Exceptions.ModelMapValidationException">
            <summary>
            Represents a validation exception of a model map
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Exceptions.ModelMapValidationException.#ctor(System.Collections.Generic.IEnumerable{OpenIZ.Core.Model.Map.ValidationResultDetail})">
            <summary>
            Creates a new model validation exception
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Exceptions.ModelMapValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{OpenIZ.Core.Model.Map.ValidationResultDetail})">
            <summary>
            Creates a new model validation exception
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Exceptions.ModelValidationException">
            <summary>
            Model validation exception
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Exceptions.ModelValidationException.#ctor(System.Collections.Generic.IEnumerable{OpenIZ.Core.Model.Map.ValidationResultDetail})">
            <summary>
            Creates a new model validation exception
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Exceptions.ModelValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{OpenIZ.Core.Model.Map.ValidationResultDetail})">
            <summary>
            Creates a new model validation exception
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Exceptions.ModelValidationException.ValidationDetails">
            <summary>
            The errors from validation
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Exceptions.ModelValidationException.ToString">
            <summary>
            Output model map exception as string
            </summary>
            <returns></returns>
        </member>
        <member name="T:OpenIZ.Core.Extensions.BinaryExtensionHandler">
            <summary>
            Binary extension handler
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Extensions.BinaryExtensionHandler.Name">
            <summary>
            Gets the name of the handler
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.BinaryExtensionHandler.DeSerialize(System.Byte[])">
            <summary>
            Deserialize data
            </summary> 
        </member>
        <member name="M:OpenIZ.Core.Extensions.BinaryExtensionHandler.GetDisplay(System.Object)">
            <summary>
            Get display 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.BinaryExtensionHandler.Serialize(System.Object)">
            <summary>
            Serialize
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Extensions.BooleanExtensionHandler">
            <summary>
            Boolean extension handler
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Extensions.BooleanExtensionHandler.Name">
            <summary>
            Gets the name of the handler
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.BooleanExtensionHandler.DeSerialize(System.Byte[])">
            <summary>
            Gets the boolean obect from a byte array
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.BooleanExtensionHandler.GetDisplay(System.Object)">
            <summary>
            Get display name
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.BooleanExtensionHandler.Serialize(System.Object)">
            <summary>
            Serialize the data into byte array
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Extensions.DateExtensionHandler">
            <summary>
            Date extension handler
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Extensions.DateExtensionHandler.Name">
            <summary>
            Gets the name of the handler
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.DateExtensionHandler.DeSerialize(System.Byte[])">
            <summary>
            Serialize to bytes
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.DateExtensionHandler.GetDisplay(System.Object)">
            <summary>
            Get the display value
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.DateExtensionHandler.Serialize(System.Object)">
            <summary>
            Serialize
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Extensions.DecimalExtensionHandler">
            <summary>
            Extension handler that can handle decimal values
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Extensions.DecimalExtensionHandler.Name">
            <summary>
            Gets the name of the handler
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.DecimalExtensionHandler.DeSerialize(System.Byte[])">
            <summary>
            De-serializes data
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.DecimalExtensionHandler.GetDisplay(System.Object)">
            <summary>
            Get display
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.DecimalExtensionHandler.Serialize(System.Object)">
            <summary>
            Serialize the data
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Extensions.DictionaryExtensionHandler">
            <summary>
            Extension that emits data as kvp
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Extensions.DictionaryExtensionHandler.Name">
            <summary>
            Gets the name of the extension
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.DictionaryExtensionHandler.DeSerialize(System.Byte[])">
            <summary>
            Deserialize data from the extension
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.DictionaryExtensionHandler.GetDisplay(System.Object)">
            <summary>
            Get display value
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.DictionaryExtensionHandler.Serialize(System.Object)">
            <summary>
            Serialize actual data
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Extensions.StringExtensionHandler">
            <summary>
            An extension handler that handles strings
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Extensions.StringExtensionHandler.Name">
            <summary>
            Gets the name of the extension handler
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.StringExtensionHandler.DeSerialize(System.Byte[])">
            <summary>
            Parses the string from bytes
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.StringExtensionHandler.GetDisplay(System.Object)">
            <summary>
            Get display representation
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Extensions.StringExtensionHandler.Serialize(System.Object)">
            <summary>
            Serialize the value
            </summary>
        </member>
        <member name="T:OpenIZ.Core.Interfaces.IExtensionHandler">
            <summary>
            Extension handler contract
            </summary>
        </member>
        <member name="P:OpenIZ.Core.Interfaces.IExtensionHandler.Name">
            <summary>
            Gets the name of the handler
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Interfaces.IExtensionHandler.DeSerialize(System.Byte[])">
            <summary>
            Represents the data as a .net value
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Interfaces.IExtensionHandler.Serialize(System.Object)">
            <summary>
            Serializes the data 
            </summary>
        </member>
        <member name="M:OpenIZ.Core.Interfaces.IExtensionHandler.GetDisplay(System.Object)">
            <summary>
            Gets the display value
            </summary>
        </member>
    </members>
</doc>
